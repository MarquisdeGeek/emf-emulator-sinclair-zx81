// START 
// START src/js/system.js
var zx = {};

// START src/js/zxbase/zxbase.js
/**
 * 
 * @constructor
 */
zx.zxbase = function(surface, scale, rom, ram_size) {

  zx.system = this;
  zx.system.surface = surface;

  this.memory = Array.apply(null, Array(ram_size)).map(function(x, i) {
    return 0;
  })
  this.rom = rom;
  this.mosaic = zx.mosaic;

  zx.peek = function(addr) {
    addr = addr & 0xffff;
    if (addr < this.rom.length) {
      return this.rom[addr];
    }
    return this.memory[addr - this.rom.length];
  }.bind(this);

  zx.poke = function(addr, value) {
    var ram_at = this.rom.length;
    addr = addr & 0xffff;
    if (addr >= ram_at) {
      this.memory[addr - ram_at] = value;
      // @TODO: If in the screen area
      // @TODO : if 118 do a CR
    }
  }.bind(this);

  zx.usr = function(value) {};

  zx.code = function(character) {
    return sgxASCII(character);
  }.bind(this);

  zx.chr$ = function(code) {
    return sgxToCharacter(code);
  };

  zx.inverse = function(text) {
    return text;
  }.bind(this);


  this.scale = scale || 1;
  this.timecum = 0;

  this.zxWidth = 32;
  this.zxHeight = 24;
  this.zxWidthPixels = 32 * 8;
  this.zxHeightPixels = 24 * 8;
  var zxwidth = this.zxWidth * 8 * this.scale;
  var zxheight = this.zxHeight * 8 * this.scale;

  this.screenRC = new sgxRect2f();
  this.screenRC.top = (surface.getHeight() - zxheight) / 2;
  this.screenRC.left = (surface.getWidth() - zxwidth) / 2;
  this.screenRC.right = this.screenRC.left + zxwidth;
  this.screenRC.bottom = this.screenRC.top + zxheight;

  this.border = [];
  this.border[0] = new sgxRect2f(0, 0, surface.getWidth(), this.screenRC.top); // top
  this.border[1] = new sgxRect2f(0, this.screenRC.top, this.screenRC.left, surface.getHeight() - this.screenRC.top); // left
  this.border[2] = new sgxRect2f(this.screenRC.left + zxwidth, this.screenRC.top, surface.getWidth() - (this.screenRC.left + zxwidth), surface.getHeight() - this.screenRC.top); //right
  this.border[3] = new sgxRect2f(this.screenRC.left, this.screenRC.top + zxheight, zxwidth, surface.getHeight() - (this.screenRC.top + zxheight));

  this.gfxBlack = zx.udg([0, 0, 0, 0, 0, 0, 0, 0]);

  this.solidDraw = false;
}

Inheritance_Manager.extend(zx.zxbase, zx.zxbase);

zx.zxbase.prototype.cls = function() {
  this.surface.setFillColor(sgxColorRGBA.White);
  this.surface.setFillTexture(NULL);
  this.surface.fillRect(this.screenRC);
}

zx.zxbase.prototype.setSolidDraw = function(solid) {
  this.solidDraw = solid;
};

zx.zxbase.prototype.updateCharacter = function(chr, udg) {}

zx.zxbase.prototype.getCharacterWidth = function(chr) {
  var t = this.getCharacterTexture(chr);
  return t ? t.getWidth() : 0;
}

zx.zxbase.prototype.getCharacterHeight = function(chr) {
  var t = this.getCharacterTexture(chr);
  return t ? t.getHeight() : 0;
}


zx.zxbase.prototype.getCharacterTexture = function(chr) {
  return this.font[chr];
}


zx.zxbase.prototype.drawCharacter = function(chr, attr, x, y) {
  return this.drawWith(this.getCharacterTexture(chr), attr, x, y);
}



zx.zxbase.prototype.drawWith = function(gfx, attr, x, y) {
  if (gfx === undefined || attr === undefined) {
    return;
  }

  var switch_colours = attr.flash && (this.flashPulse != attr.inverse);
  var width = gfx.paper.getWidth();
  var height = gfx.paper.getHeight();
  var rc = new sgxRect2f(this.screenRC.left + x * this.scale, this.screenRC.top + y * this.scale, width * this.scale, height * this.scale);

  this.surface.setClipRect(this.screenRC);
  this.surface.setFillColor(this.solidDraw ? sgxColorRGBA.White : sgxColorRGBA.Black);
  this.surface.setFillTexture(this.solidDraw ? gfx.solid : gfx.ink);
  this.surface.fillRect(rc);
}
// @todo recomputeSurface(surface);
// @todo use surface

zx.zxbase.prototype.draw = function(surface) {
  this.surface.setFillColor(sgxColorRGBA.White);
  this.surface.setFillTexture(NULL);

  this.surface.setClipRect(NULL);
  for (var i = 0; i < 4; ++i) {
    this.surface.fillRect(this.border[i]);
  }
}

// http://www.worldofzx80.org/ZXBasicManual/zxmanchap17.html
zx.zxbase.prototype.plot = function(x, y) {
  this.surface.setClipRect(this.screenRC);

  if (x >= 0 && y >= 0 && x < 64 && y < 44) {
    var rc = new sgxRect2f();
    rc.left = this.toX(sgxFloor(x) * 4);
    rc.top = this.toY(sgxFloor(44 - y) * 4);

    rc.right = rc.left + 4 * this.scale;
    rc.bottom = rc.top + 4 * this.scale;

    this.surface.setFillTexture(this.font[64].ink);
    this.surface.fillRect(rc);
  }
}

zx.zxbase.prototype.drawPoint = function(x, y) {}

zx.zxbase.prototype.toX = function(x) {
  return this.screenRC.left + x * this.scale;
}

zx.zxbase.prototype.toY = function(y) {
  return this.screenRC.top + y * this.scale;
}

zx.zxbase.prototype.drawLineWith = function(attr, x1, y1, x2, y2) {}

zx.zxbase.prototype.drawLine = function(x1, y1, x2, y2) {}

zx.zxbase.prototype.circle = function(x, y, r) {}


zx.zxbase.prototype.update = function(telaps) {
  zx.lastInkey = undefined;
  for (var k = 8; k < 128; ++k) {
    if (sgx.input.Engine.get().isKeyboardKeyPressed(k)) {
      zx.lastInkey = k;
    }
  }
}

zx.zxbase.prototype.getRGB = function(index, bright) {}

zx.zxbase.prototype.setBorderColor = function(colour) {}
zx.zxbase.prototype.setInkColor = function(colour) {}
zx.zxbase.prototype.setPaperColor = function(colour) {}
zx.zxbase.prototype.setBright = function(bright) {}
zx.zxbase.prototype.setFlash = function(flash) {}
// START src/js/zx81/rom.js
zx.rom = [0xD3, 0xFD, 0x01, 0xFF, 0x7F, 0xC3, 0xCB, 0x03, 0x2A, 0x16, 0x40, 0x22, 0x18, 0x40, 0x18, 0x46, 0xA7, 0xC2, 0xF1, 0x07, 0xC3, 0xF5, 0x07, 0xFF, 0x2A, 0x16, 0x40, 0x7E, 0xA7, 0xC0, 0x00, 0x00, 0xCD, 0x49, 0x00, 0x18, 0xF7, 0xFF, 0xFF, 0xFF, 0xC3, 0x9D, 0x19, 0xF1, 0xD9, 0xE3, 0xD9, 0xC9, 0xC5, 0x2A, 0x14, 0x40, 0xE5, 0xC3, 0x88, 0x14, 0x0D, 0xC2, 0x45, 0x00, 0xE1, 0x05, 0xC8, 0xCB, 0xD9, 0xED, 0x4F, 0xFB, 0xE9, 0xD1, 0xC8, 0x18, 0xF8, 0x2A, 0x16, 0x40, 0x23, 0x22, 0x16, 0x40, 0x7E, 0xFE, 0x7F, 0xC0, 0x18, 0xF6, 0xE1, 0x6E, 0xFD, 0x75, 0x00, 0xED, 0x7B, 0x02, 0x40, 0xCD, 0x07, 0x02, 0xC3, 0xBC, 0x14, 0xFF, 0x08, 0x3C, 0xFA, 0x6D, 0x00, 0x28, 0x02, 0x08, 0xC9, 0x08, 0xF5, 0xC5, 0xD5, 0xE5, 0x2A, 0x0C, 0x40, 0xCB, 0xFC, 0x76, 0xD3, 0xFD, 0xDD, 0xE9, 0x3F, 0x3D, 0x28, 0x3B, 0x26, 0x38, 0x29, 0x2B, 0x2C, 0x36, 0x3C, 0x2A, 0x37, 0x39, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x1C, 0x25, 0x24, 0x23, 0x22, 0x35, 0x34, 0x2E, 0x3A, 0x3E, 0x76, 0x31, 0x30, 0x2F, 0x2D, 0x00, 0x1B, 0x32, 0x33, 0x27, 0x0E, 0x19, 0x0F, 0x18, 0xE3, 0xE1, 0xE4, 0xE5, 0xE2, 0xC0, 0xD9, 0xE0, 0xDB, 0xDD, 0x75, 0xDA, 0xDE, 0xDF, 0x72, 0x77, 0x74, 0x73, 0x70, 0x71, 0x0B, 0x11, 0x10, 0x0D, 0xDC, 0x79, 0x14, 0x15, 0x16, 0xD8, 0x0C, 0x1A, 0x12, 0x13, 0x17, 0xCD, 0xCE, 0xC1, 0x78, 0xCA, 0xCB, 0xCC, 0xD1, 0xD2, 0xC7, 0xC8, 0xC9, 0xCF, 0x40, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0xC2, 0xD3, 0xC4, 0xD6, 0xD5, 0x78, 0xD4, 0xC6, 0xC5, 0xD0, 0x78, 0x78, 0x42, 0xD7, 0x41, 0x08, 0x0A, 0x09, 0x8A, 0x89, 0x81, 0x82, 0x07, 0x84, 0x06, 0x01, 0x02, 0x87, 0x04, 0x05, 0x77, 0x78, 0x85, 0x03, 0x83, 0x8B, 0x91, 0x90, 0x8D, 0x86, 0x78, 0x92, 0x95, 0x96, 0x88, 0x8F, 0x0B, 0x8B, 0x26, 0xB9, 0x39, 0x26, 0xA7, 0x8F, 0x28, 0x34, 0x29, 0xAA, 0x3B, 0x26, 0xB1, 0x31, 0x2A, 0xB3, 0x38, 0x2E, 0xB3, 0x28, 0x34, 0xB8, 0x39, 0x26, 0xB3, 0x26, 0x38, 0xB3, 0x26, 0x28, 0xB8, 0x26, 0x39, 0xB3, 0x31, 0xB3, 0x2A, 0x3D, 0xB5, 0x2E, 0x33, 0xB9, 0x38, 0x36, 0xB7, 0x38, 0x2C, 0xB3, 0x26, 0x27, 0xB8, 0x35, 0x2A, 0x2A, 0xB0, 0x3A, 0x38, 0xB7, 0x38, 0x39, 0x37, 0x8D, 0x28, 0x2D, 0x37, 0x8D, 0x33, 0x34, 0xB9, 0x17, 0x97, 0x34, 0xB7, 0x26, 0x33, 0xA9, 0x13, 0x94, 0x12, 0x94, 0x13, 0x92, 0x39, 0x2D, 0x2A, 0xB3, 0x39, 0xB4, 0x38, 0x39, 0x2A, 0xB5, 0x31, 0x35, 0x37, 0x2E, 0x33, 0xB9, 0x31, 0x31, 0x2E, 0x38, 0xB9, 0x38, 0x39, 0x34, 0xB5, 0x38, 0x31, 0x34, 0xBC, 0x2B, 0x26, 0x38, 0xB9, 0x33, 0x2A, 0xBC, 0x38, 0x28, 0x37, 0x34, 0x31, 0xB1, 0x28, 0x34, 0x33, 0xB9, 0x29, 0x2E, 0xB2, 0x37, 0x2A, 0xB2, 0x2B, 0x34, 0xB7, 0x2C, 0x34, 0x39, 0xB4, 0x2C, 0x34, 0x38, 0x3A, 0xA7, 0x2E, 0x33, 0x35, 0x3A, 0xB9, 0x31, 0x34, 0x26, 0xA9, 0x31, 0x2E, 0x38, 0xB9, 0x31, 0x2A, 0xB9, 0x35, 0x26, 0x3A, 0x38, 0xAA, 0x33, 0x2A, 0x3D, 0xB9, 0x35, 0x34, 0x30, 0xAA, 0x35, 0x37, 0x2E, 0x33, 0xB9, 0x35, 0x31, 0x34, 0xB9, 0x37, 0x3A, 0xB3, 0x38, 0x26, 0x3B, 0xAA, 0x37, 0x26, 0x33, 0xA9, 0x2E, 0xAB, 0x28, 0x31, 0xB8, 0x3A, 0x33, 0x35, 0x31, 0x34, 0xB9, 0x28, 0x31, 0x2A, 0x26, 0xB7, 0x37, 0x2A, 0x39, 0x3A, 0x37, 0xB3, 0x28, 0x34, 0x35, 0xBE, 0x37, 0x33, 0xA9, 0x2E, 0x33, 0x30, 0x2A, 0x3E, 0x8D, 0x35, 0xAE, 0x23, 0xEB, 0x2A, 0x14, 0x40, 0x37, 0xED, 0x52, 0xEB, 0xD0, 0xE1, 0x21, 0x3B, 0x40, 0x7E, 0x17, 0xAE, 0x17, 0xD0, 0x3E, 0x7F, 0x08, 0x06, 0x11, 0xD3, 0xFE, 0x10, 0xFE, 0xD3, 0xFD, 0x08, 0x17, 0x30, 0x08, 0xCB, 0xFE, 0xF5, 0xC5, 0xD5, 0xE5, 0x18, 0x03, 0xCB, 0xB6, 0xC9, 0x2A, 0x34, 0x40, 0x2B, 0x3E, 0x7F, 0xA4, 0xB5, 0x7C, 0x20, 0x03, 0x17, 0x18, 0x02, 0x46, 0x37, 0x67, 0x22, 0x34, 0x40, 0xD0, 0xCD, 0xBB, 0x02, 0xED, 0x4B, 0x25, 0x40, 0x22, 0x25, 0x40, 0x78, 0xC6, 0x02, 0xED, 0x42, 0x3A, 0x27, 0x40, 0xB4, 0xB5, 0x58, 0x06, 0x0B, 0x21, 0x3B, 0x40, 0xCB, 0x86, 0x20, 0x08, 0xCB, 0x7E, 0xCB, 0xC6, 0xC8, 0x05, 0x00, 0x37, 0x21, 0x27, 0x40, 0x3F, 0xCB, 0x10, 0x10, 0xFE, 0x46, 0x7B, 0xFE, 0xFE, 0x9F, 0x06, 0x1F, 0xB6, 0xA0, 0x1F, 0x77, 0xD3, 0xFF, 0x2A, 0x0C, 0x40, 0xCB, 0xFC, 0xCD, 0x92, 0x02, 0xED, 0x5F, 0x01, 0x01, 0x19, 0x3E, 0xF5, 0xCD, 0xB5, 0x02, 0x2B, 0xCD, 0x92, 0x02, 0xC3, 0x29, 0x02, 0xDD, 0xE1, 0xFD, 0x4E, 0x28, 0xFD, 0xCB, 0x3B, 0x7E, 0x28, 0x0C, 0x79, 0xED, 0x44, 0x3C, 0x08, 0xD3, 0xFE, 0xE1, 0xD1, 0xC1, 0xF1, 0xC9, 0x3E, 0xFC, 0x06, 0x01, 0xCD, 0xB5, 0x02, 0x2B, 0xE3, 0xE3, 0xDD, 0xE9, 0xED, 0x4F, 0x3E, 0xDD, 0xFB, 0xE9, 0x21, 0xFF, 0xFF, 0x01, 0xFE, 0xFE, 0xED, 0x78, 0xF6, 0x01, 0xF6, 0xE0, 0x57, 0x2F, 0xFE, 0x01, 0x9F, 0xB0, 0xA5, 0x6F, 0x7C, 0xA2, 0x67, 0xCB, 0x00, 0xED, 0x78, 0x38, 0xED, 0x1F, 0xCB, 0x14, 0x17, 0x17, 0x17, 0x9F, 0xE6, 0x18, 0xC6, 0x1F, 0x32, 0x28, 0x40, 0xC9, 0xFD, 0xCB, 0x3B, 0x7E, 0xC8, 0x76, 0xD3, 0xFD, 0xFD, 0xCB, 0x3B, 0xBE, 0xC9, 0xCF, 0x0E, 0xCD, 0xA8, 0x03, 0x38, 0xF9, 0xEB, 0x11, 0xCB, 0x12, 0xCD, 0x46, 0x0F, 0x30, 0x2E, 0x10, 0xFE, 0x1B, 0x7A, 0xB3, 0x20, 0xF4, 0xCD, 0x1E, 0x03, 0xCB, 0x7E, 0x23, 0x28, 0xF8, 0x21, 0x09, 0x40, 0xCD, 0x1E, 0x03, 0xCD, 0xFC, 0x01, 0x18, 0xF8, 0x5E, 0x37, 0xCB, 0x13, 0xC8, 0x9F, 0xE6, 0x05, 0xC6, 0x04, 0x4F, 0xD3, 0xFF, 0x06, 0x23, 0x10, 0xFE, 0xCD, 0x46, 0x0F, 0x30, 0x72, 0x06, 0x1E, 0x10, 0xFE, 0x0D, 0x20, 0xEE, 0xA7, 0x10, 0xFD, 0x18, 0xE0, 0xCD, 0xA8, 0x03, 0xCB, 0x12, 0xCB, 0x0A, 0xCD, 0x4C, 0x03, 0x18, 0xFB, 0x0E, 0x01, 0x06, 0x00, 0x3E, 0x7F, 0xDB, 0xFE, 0xD3, 0xFF, 0x1F, 0x30, 0x49, 0x17, 0x17, 0x38, 0x28, 0x10, 0xF1, 0xF1, 0xBA, 0xD2, 0xE5, 0x03, 0x62, 0x6B, 0xCD, 0x4C, 0x03, 0xCB, 0x7A, 0x79, 0x20, 0x03, 0xBE, 0x20, 0xD6, 0x23, 0x17, 0x30, 0xF1, 0xFD, 0x34, 0x15, 0x21, 0x09, 0x40, 0x50, 0xCD, 0x4C, 0x03, 0x71, 0xCD, 0xFC, 0x01, 0x18, 0xF6, 0xD5, 0x1E, 0x94, 0x06, 0x1A, 0x1D, 0xDB, 0xFE, 0x17, 0xCB, 0x7B, 0x7B, 0x38, 0xF5, 0x10, 0xF5, 0xD1, 0x20, 0x04, 0xFE, 0x56, 0x30, 0xB2, 0x3F, 0xCB, 0x11, 0x30, 0xAD, 0xC9, 0x7A, 0xA7, 0x28, 0xBB, 0xCF, 0x0C, 0xCD, 0x55, 0x0F, 0x3A, 0x01, 0x40, 0x87, 0xFA, 0x9A, 0x0D, 0xE1, 0xD0, 0xE5, 0xCD, 0xE7, 0x02, 0xCD, 0xF8, 0x13, 0x62, 0x6B, 0x0D, 0xF8, 0x09, 0xCB, 0xFE, 0xC9, 0xCD, 0xE7, 0x02, 0xED, 0x4B, 0x04, 0x40, 0x0B, 0x60, 0x69, 0x3E, 0x3F, 0x36, 0x02, 0x2B, 0xBC, 0x20, 0xFA, 0xA7, 0xED, 0x42, 0x09, 0x23, 0x30, 0x06, 0x35, 0x28, 0x03, 0x35, 0x28, 0xF3, 0x22, 0x04, 0x40, 0x2A, 0x04, 0x40, 0x2B, 0x36, 0x3E, 0x2B, 0xF9, 0x2B, 0x2B, 0x22, 0x02, 0x40, 0x3E, 0x1E, 0xED, 0x47, 0xED, 0x56, 0xFD, 0x21, 0x00, 0x40, 0xFD, 0x36, 0x3B, 0x40, 0x21, 0x7D, 0x40, 0x22, 0x0C, 0x40, 0x06, 0x19, 0x36, 0x76, 0x23, 0x10, 0xFB, 0x22, 0x10, 0x40, 0xCD, 0x9A, 0x14, 0xCD, 0xAD, 0x14, 0xCD, 0x07, 0x02, 0xCD, 0x2A, 0x0A, 0x2A, 0x0A, 0x40, 0xED, 0x5B, 0x23, 0x40, 0xA7, 0xED, 0x52, 0xEB, 0x30, 0x04, 0x19, 0x22, 0x23, 0x40, 0xCD, 0xD8, 0x09, 0x28, 0x01, 0xEB, 0xCD, 0x3E, 0x07, 0xFD, 0x35, 0x1E, 0x20, 0x37, 0x2A, 0x0A, 0x40, 0xCD, 0xD8, 0x09, 0x2A, 0x16, 0x40, 0x37, 0xED, 0x52, 0x21, 0x23, 0x40, 0x30, 0x0B, 0xEB, 0x7E, 0x23, 0xED, 0xA0, 0x12, 0x18, 0xC5, 0x21, 0x0A, 0x40, 0x5E, 0x23, 0x56, 0xE5, 0xEB, 0x23, 0xCD, 0xD8, 0x09, 0xCD, 0xBB, 0x05, 0xE1, 0xFD, 0xCB, 0x2D, 0x6E, 0x20, 0x08, 0x72, 0x2B, 0x73, 0x18, 0xAA, 0xCD, 0xAD, 0x14, 0x2A, 0x14, 0x40, 0x7E, 0xFE, 0x7E, 0x20, 0x08, 0x01, 0x06, 0x00, 0xCD, 0x60, 0x0A, 0x18, 0xF3, 0xFE, 0x76, 0x23, 0x20, 0xEE, 0xCD, 0x37, 0x05, 0xCD, 0x1F, 0x0A, 0x2A, 0x14, 0x40, 0xFD, 0x36, 0x00, 0xFF, 0xCD, 0x66, 0x07, 0xFD, 0xCB, 0x00, 0x7E, 0x20, 0x24, 0x3A, 0x22, 0x40, 0xFE, 0x18, 0x30, 0x1D, 0x3C, 0x32, 0x22, 0x40, 0x47, 0x0E, 0x01, 0xCD, 0x18, 0x09, 0x54, 0x5D, 0x7E, 0x2B, 0xBE, 0x20, 0xFC, 0x23, 0xEB, 0x3A, 0x05, 0x40, 0xFE, 0x4D, 0xDC, 0x5D, 0x0A, 0x18, 0xC9, 0x21, 0x00, 0x00, 0x22, 0x18, 0x40, 0x21, 0x3B, 0x40, 0xCB, 0x7E, 0xCC, 0x29, 0x02, 0xCB, 0x46, 0x28, 0xFC, 0xED, 0x4B, 0x25, 0x40, 0xCD, 0x4B, 0x0F, 0xCD, 0xBD, 0x07, 0x30, 0x93, 0x3A, 0x06, 0x40, 0x3D, 0xFA, 0x08, 0x05, 0x20, 0x0F, 0x32, 0x06, 0x40, 0x1D, 0x7B, 0xD6, 0x27, 0x38, 0x01, 0x5F, 0x21, 0xCC, 0x00, 0x18, 0x0E, 0x7E, 0xFE, 0x76, 0x28, 0x2F, 0xFE, 0x40, 0xCB, 0xFF, 0x38, 0x19, 0x21, 0xC7, 0x00, 0x19, 0x18, 0x0D, 0x7E, 0xFD, 0xCB, 0x01, 0x56, 0x20, 0x07, 0xC6, 0xC0, 0xFE, 0xE6, 0x30, 0x01, 0x7E, 0xFE, 0xF0, 0xEA, 0x2D, 0x05, 0x5F, 0xCD, 0x37, 0x05, 0x7B, 0xCD, 0x26, 0x05, 0xC3, 0x72, 0x04, 0xCD, 0x9B, 0x09, 0x12, 0xC9, 0x3E, 0x78, 0x5F, 0x21, 0x82, 0x04, 0x19, 0x19, 0x4E, 0x23, 0x46, 0xC5, 0x2A, 0x14, 0x40, 0xFD, 0xCB, 0x2D, 0x6E, 0x20, 0x16, 0xFD, 0xCB, 0x01, 0x96, 0x7E, 0xFE, 0x7F, 0xC8, 0x23, 0xCD, 0xB4, 0x07, 0x28, 0xF6, 0xFE, 0x26, 0x38, 0xF2, 0xFE, 0xDE, 0x28, 0xEA, 0xFD, 0xCB, 0x01, 0xD6, 0x18, 0xE8, 0x01, 0x01, 0x00, 0xC3, 0x60, 0x0A, 0x9F, 0x05, 0x54, 0x04, 0x76, 0x05, 0x7F, 0x05, 0xAF, 0x05, 0xC4, 0x05, 0x0C, 0x06, 0x8B, 0x05, 0xAF, 0x05, 0xAF, 0x05, 0xCD, 0x93, 0x05, 0x7E, 0x36, 0x7F, 0x23, 0x18, 0x09, 0x23, 0x7E, 0xFE, 0x76, 0x28, 0x18, 0x36, 0x7F, 0x2B, 0x77, 0x18, 0x98, 0xCD, 0x93, 0x05, 0xCD, 0x5C, 0x05, 0x18, 0xF6, 0x2B, 0xED, 0x5B, 0x14, 0x40, 0x1A, 0xFE, 0x7F, 0xC0, 0xD1, 0x18, 0xEA, 0x2A, 0x0A, 0x40, 0xCD, 0xD8, 0x09, 0xEB, 0xCD, 0xBB, 0x05, 0x21, 0x0B, 0x40, 0xC3, 0x64, 0x04, 0x7B, 0xE6, 0x07, 0x32, 0x06, 0x40, 0x18, 0xE6, 0xEB, 0x11, 0xC2, 0x04, 0x7E, 0xE6, 0xC0, 0x20, 0xF7, 0x56, 0x23, 0x5E, 0xC9, 0xCD, 0x1F, 0x0A, 0x21, 0x6F, 0x04, 0xE5, 0xFD, 0xCB, 0x2D, 0x6E, 0xC0, 0x2A, 0x14, 0x40, 0x22, 0x0E, 0x40, 0x21, 0x21, 0x18, 0x22, 0x39, 0x40, 0x2A, 0x0A, 0x40, 0xCD, 0xD8, 0x09, 0xCD, 0xBB, 0x05, 0x7A, 0xB3, 0xC8, 0x2B, 0xCD, 0xA5, 0x0A, 0x23, 0x4E, 0x23, 0x46, 0x23, 0xED, 0x5B, 0x0E, 0x40, 0x3E, 0x7F, 0x12, 0x13, 0xE5, 0x21, 0x1D, 0x00, 0x19, 0x09, 0xED, 0x72, 0xE1, 0xD0, 0xED, 0xB0, 0xEB, 0xD1, 0xCD, 0xA6, 0x14, 0x18, 0x91, 0xCD, 0x1F, 0x0A, 0x21, 0x72, 0x04, 0xFD, 0xCB, 0x2D, 0x6E, 0x20, 0x11, 0x2A, 0x14, 0x40, 0x7E, 0xFE, 0xFF, 0x28, 0x06, 0xCD, 0xE2, 0x08, 0xCD, 0x2A, 0x0A, 0x21, 0x19, 0x04, 0xE5, 0xCD, 0xBA, 0x0C, 0xE1, 0xCD, 0x37, 0x05, 0xCD, 0x5C, 0x05, 0xCD, 0x73, 0x0A, 0x20, 0x15, 0x78, 0xB1, 0xC2, 0xE0, 0x06, 0x0B, 0x0B, 0xED, 0x43, 0x07, 0x40, 0xFD, 0x36, 0x22, 0x02, 0xED, 0x5B, 0x0C, 0x40, 0x18, 0x13, 0xFE, 0x76, 0x28, 0x12, 0xED, 0x4B, 0x30, 0x40, 0xCD, 0x18, 0x09, 0xED, 0x5B, 0x29, 0x40, 0xFD, 0x36, 0x22, 0x02, 0xDF, 0xFE, 0x76, 0xCA, 0x13, 0x04, 0xFD, 0x36, 0x01, 0x80, 0xEB, 0x22, 0x29, 0x40, 0xEB, 0xCD, 0x4D, 0x00, 0xCD, 0xC1, 0x0C, 0xFD, 0xCB, 0x01, 0x8E, 0x3E, 0xC0, 0xFD, 0x77, 0x19, 0xCD, 0xA3, 0x14, 0xFD, 0xCB, 0x2D, 0xAE, 0xFD, 0xCB, 0x00, 0x7E, 0x28, 0x22, 0x2A, 0x29, 0x40, 0xA6, 0x20, 0x1C, 0x56, 0x23, 0x5E, 0xED, 0x53, 0x07, 0x40, 0x23, 0x5E, 0x23, 0x56, 0x23, 0xEB, 0x19, 0xCD, 0x46, 0x0F, 0x38, 0xC7, 0x21, 0x00, 0x40, 0xCB, 0x7E, 0x28, 0x02, 0x36, 0x0C, 0xFD, 0xCB, 0x38, 0x7E, 0xCC, 0x71, 0x08, 0x01, 0x21, 0x01, 0xCD, 0x18, 0x09, 0x3A, 0x00, 0x40, 0xED, 0x4B, 0x07, 0x40, 0x3C, 0x28, 0x0C, 0xFE, 0x09, 0x20, 0x01, 0x03, 0xED, 0x43, 0x2B, 0x40, 0x20, 0x01, 0x0B, 0xCD, 0xEB, 0x07, 0x3E, 0x18, 0xD7, 0xCD, 0x98, 0x0A, 0xCD, 0xAD, 0x14, 0xC3, 0xC1, 0x04, 0xED, 0x43, 0x0A, 0x40, 0x2A, 0x16, 0x40, 0xEB, 0x21, 0x13, 0x04, 0xE5, 0x2A, 0x1A, 0x40, 0xED, 0x52, 0xE5, 0xC5, 0xCD, 0xE7, 0x02, 0xCD, 0x2A, 0x0A, 0xE1, 0xCD, 0xD8, 0x09, 0x20, 0x06, 0xCD, 0xF2, 0x09, 0xCD, 0x60, 0x0A, 0xC1, 0x79, 0x3D, 0xB0, 0xC8, 0xC5, 0x03, 0x03, 0x03, 0x03, 0x2B, 0xCD, 0x9E, 0x09, 0xCD, 0x07, 0x02, 0xC1, 0xC5, 0x13, 0x2A, 0x1A, 0x40, 0x2B, 0xED, 0xB8, 0x2A, 0x0A, 0x40, 0xEB, 0xC1, 0x70, 0x2B, 0x71, 0x2B, 0x73, 0x2B, 0x72, 0xC9, 0xFD, 0xCB, 0x01, 0xCE, 0xCD, 0xA7, 0x0E, 0x78, 0xE6, 0x3F, 0x67, 0x69, 0x22, 0x0A, 0x40, 0xCD, 0xD8, 0x09, 0x1E, 0x00, 0xCD, 0x45, 0x07, 0x18, 0xFB, 0xED, 0x4B, 0x0A, 0x40, 0xCD, 0xEA, 0x09, 0x16, 0x92, 0x28, 0x05, 0x11, 0x00, 0x00, 0xCB, 0x13, 0xFD, 0x73, 0x1E, 0x7E, 0xFE, 0x40, 0xC1, 0xD0, 0xC5, 0xCD, 0xA5, 0x0A, 0x23, 0x7A, 0xD7, 0x23, 0x23, 0x22, 0x16, 0x40, 0xFD, 0xCB, 0x01, 0xC6, 0xED, 0x4B, 0x18, 0x40, 0x2A, 0x16, 0x40, 0xA7, 0xED, 0x42, 0x20, 0x03, 0x3E, 0xB8, 0xD7, 0x2A, 0x16, 0x40, 0x7E, 0x23, 0xCD, 0xB4, 0x07, 0x22, 0x16, 0x40, 0x28, 0xE4, 0xFE, 0x7F, 0x28, 0x10, 0xFE, 0x76, 0x28, 0x5D, 0xCB, 0x77, 0x28, 0x05, 0xCD, 0x4B, 0x09, 0x18, 0xD3, 0xD7, 0x18, 0xD0, 0x3A, 0x06, 0x40, 0x06, 0xAB, 0xA7, 0x20, 0x05, 0x3A, 0x01, 0x40, 0x06, 0xB0, 0x1F, 0x1F, 0xE6, 0x01, 0x80, 0xCD, 0xF5, 0x07, 0x18, 0xB9, 0xFE, 0x7E, 0xC0, 0x23, 0x23, 0x23, 0x23, 0x23, 0xC9, 0x16, 0x00, 0xCB, 0x28, 0x9F, 0xF6, 0x26, 0x2E, 0x05, 0x95, 0x85, 0x37, 0xCB, 0x19, 0x38, 0xFA, 0x0C, 0xC0, 0x48, 0x2D, 0x2E, 0x01, 0x20, 0xF2, 0x21, 0x7D, 0x00, 0x5F, 0x19, 0x37, 0xC9, 0x7B, 0xA7, 0xF8, 0x18, 0x10, 0xAF, 0x09, 0x3C, 0x38, 0xFC, 0xED, 0x42, 0x3D, 0x28, 0xF1, 0x1E, 0x1C, 0x83, 0xA7, 0x28, 0x04, 0xFD, 0xCB, 0x01, 0x86, 0xD9, 0xE5, 0xFD, 0xCB, 0x01, 0x4E, 0x20, 0x05, 0xCD, 0x08, 0x08, 0x18, 0x03, 0xCD, 0x51, 0x08, 0xE1, 0xD9, 0xC9, 0x57, 0xED, 0x4B, 0x39, 0x40, 0x79, 0xFE, 0x21, 0x28, 0x1A, 0x3E, 0x76, 0xBA, 0x28, 0x30, 0x2A, 0x0E, 0x40, 0xBE, 0x7A, 0x20, 0x20, 0x0D, 0x20, 0x19, 0x23, 0x22, 0x0E, 0x40, 0x0E, 0x21, 0x05, 0xED, 0x43, 0x39, 0x40, 0x78, 0xFD, 0xBE, 0x22, 0x28, 0x03, 0xA7, 0x20, 0xDD, 0x2E, 0x04, 0xC3, 0x58, 0x00, 0xCD, 0x9B, 0x09, 0xEB, 0x77, 0x23, 0x22, 0x0E, 0x40, 0xFD, 0x35, 0x39, 0xC9, 0x0E, 0x21, 0x05, 0xFD, 0xCB, 0x01, 0xC6, 0xC3, 0x18, 0x09, 0xFE, 0x76, 0x28, 0x1C, 0x4F, 0x3A, 0x38, 0x40, 0xE6, 0x7F, 0xFE, 0x5C, 0x6F, 0x26, 0x40, 0xCC, 0x71, 0x08, 0x71, 0x2C, 0xFD, 0x75, 0x38, 0xC9, 0x16, 0x16, 0x2A, 0x0C, 0x40, 0x23, 0x18, 0x05, 0x16, 0x01, 0x21, 0x3C, 0x40, 0xCD, 0xE7, 0x02, 0xC5, 0xE5, 0xAF, 0x5F, 0xD3, 0xFB, 0xE1, 0xCD, 0x46, 0x0F, 0x38, 0x05, 0x1F, 0xD3, 0xFB, 0xCF, 0x0C, 0xDB, 0xFB, 0x87, 0xFA, 0xDE, 0x08, 0x30, 0xEE, 0xE5, 0xD5, 0x7A, 0xFE, 0x02, 0x9F, 0xA3, 0x07, 0xA3, 0x57, 0x4E, 0x79, 0x23, 0xFE, 0x76, 0x28, 0x24, 0xE5, 0xCB, 0x27, 0x87, 0x87, 0x26, 0x0F, 0xCB, 0x14, 0x83, 0x6F, 0xCB, 0x11, 0x9F, 0xAE, 0x4F, 0x06, 0x08, 0x7A, 0xCB, 0x01, 0x1F, 0x67, 0xDB, 0xFB, 0x1F, 0x30, 0xFB, 0x7C, 0xD3, 0xFB, 0x10, 0xF1, 0xE1, 0x18, 0xD5, 0xDB, 0xFB, 0x1F, 0x30, 0xFB, 0x7A, 0x0F, 0xD3, 0xFB, 0xD1, 0x1C, 0xCB, 0x5B, 0x28, 0xA7, 0xC1, 0x15, 0x20, 0xA0, 0x3E, 0x04, 0xD3, 0xFB, 0xCD, 0x07, 0x02, 0xC1, 0x21, 0x5C, 0x40, 0x36, 0x76, 0x06, 0x20, 0x2B, 0x36, 0x00, 0x10, 0xFB, 0x7D, 0xCB, 0xFF, 0x32, 0x38, 0x40, 0xC9, 0x3E, 0x17, 0x90, 0x38, 0x0B, 0xFD, 0xBE, 0x22, 0xDA, 0x35, 0x08, 0x3C, 0x47, 0x3E, 0x1F, 0x91, 0xDA, 0xAD, 0x0E, 0xC6, 0x02, 0x4F, 0xFD, 0xCB, 0x01, 0x4E, 0x28, 0x07, 0x3E, 0x5D, 0x91, 0x32, 0x38, 0x40, 0xC9, 0xED, 0x43, 0x39, 0x40, 0x2A, 0x10, 0x40, 0x51, 0x3E, 0x22, 0x91, 0x4F, 0x3E, 0x76, 0x04, 0x2B, 0xBE, 0x20, 0xFC, 0x10, 0xFA, 0x23, 0xED, 0xB1, 0x2B, 0x22, 0x0E, 0x40, 0x37, 0xE0, 0x15, 0xC8, 0xC5, 0xCD, 0x9E, 0x09, 0xC1, 0x41, 0x62, 0x6B, 0x36, 0x00, 0x2B, 0x10, 0xFB, 0xEB, 0x23, 0x22, 0x0E, 0x40, 0xC9, 0xF5, 0xCD, 0x75, 0x09, 0x30, 0x08, 0xFD, 0xCB, 0x01, 0x46, 0x20, 0x02, 0xAF, 0xD7, 0x0A, 0xE6, 0x3F, 0xD7, 0x0A, 0x03, 0x87, 0x30, 0xF7, 0xC1, 0xCB, 0x78, 0xC8, 0xFE, 0x1A, 0x28, 0x03, 0xFE, 0x38, 0xD8, 0xAF, 0xFD, 0xCB, 0x01, 0xC6, 0xC3, 0xF5, 0x07, 0xE5, 0x21, 0x11, 0x01, 0xCB, 0x7F, 0x28, 0x02, 0xE6, 0x3F, 0xFE, 0x43, 0x30, 0x10, 0x47, 0x04, 0xCB, 0x7E, 0x23, 0x28, 0xFB, 0x10, 0xF9, 0xCB, 0x77, 0x20, 0x02, 0xFE, 0x18, 0x3F, 0x44, 0x4D, 0xE1, 0xD0, 0x0A, 0xC6, 0xE4, 0xC9, 0x01, 0x01, 0x00, 0xE5, 0xCD, 0xC5, 0x0E, 0xE1, 0xCD, 0xAD, 0x09, 0x2A, 0x1C, 0x40, 0xEB, 0xED, 0xB8, 0xC9, 0xF5, 0xE5, 0x21, 0x0C, 0x40, 0x3E, 0x09, 0x5E, 0x23, 0x56, 0xE3, 0xA7, 0xED, 0x52, 0x19, 0xE3, 0x30, 0x09, 0xD5, 0xEB, 0x09, 0xEB, 0x72, 0x2B, 0x73, 0x23, 0xD1, 0x23, 0x3D, 0x20, 0xE8, 0xEB, 0xD1, 0xF1, 0xA7, 0xED, 0x52, 0x44, 0x4D, 0x03, 0x19, 0xEB, 0xC9, 0xE5, 0x21, 0x7D, 0x40, 0x54, 0x5D, 0xC1, 0xCD, 0xEA, 0x09, 0xD0, 0xC5, 0xCD, 0xF2, 0x09, 0xEB, 0x18, 0xF4, 0x7E, 0xB8, 0xC0, 0x23, 0x7E, 0x2B, 0xB9, 0xC9, 0xE5, 0x7E, 0xFE, 0x40, 0x38, 0x17, 0xCB, 0x6F, 0x28, 0x14, 0x87, 0xFA, 0x01, 0x0A, 0x3F, 0x01, 0x05, 0x00, 0x30, 0x02, 0x0E, 0x11, 0x17, 0x23, 0x7E, 0x30, 0xFB, 0x18, 0x06, 0x23, 0x23, 0x4E, 0x23, 0x46, 0x23, 0x09, 0xD1, 0xA7, 0xED, 0x52, 0x44, 0x4D, 0x19, 0xEB, 0xC9, 0xFD, 0x46, 0x22, 0xC5, 0xCD, 0x2C, 0x0A, 0xC1, 0x05, 0x18, 0x02, 0x06, 0x18, 0xFD, 0xCB, 0x01, 0x8E, 0x0E, 0x21, 0xC5, 0xCD, 0x18, 0x09, 0xC1, 0x3A, 0x05, 0x40, 0xFE, 0x4D, 0x38, 0x14, 0xFD, 0xCB, 0x3A, 0xFE, 0xAF, 0xCD, 0xF5, 0x07, 0x2A, 0x39, 0x40, 0x7D, 0xB4, 0xE6, 0x7E, 0x20, 0xF3, 0xC3, 0x18, 0x09, 0x54, 0x5D, 0x2B, 0x48, 0x06, 0x00, 0xED, 0xB0, 0x2A, 0x10, 0x40, 0xCD, 0x17, 0x0A, 0xC5, 0x78, 0x2F, 0x47, 0x79, 0x2F, 0x4F, 0x03, 0xCD, 0xAD, 0x09, 0xEB, 0xE1, 0x19, 0xD5, 0xED, 0xB0, 0xE1, 0xC9, 0x2A, 0x14, 0x40, 0xCD, 0x4D, 0x00, 0xDF, 0xFD, 0xCB, 0x2D, 0x6E, 0xC0, 0x21, 0x5D, 0x40, 0x22, 0x1C, 0x40, 0xCD, 0x48, 0x15, 0xCD, 0x8A, 0x15, 0x38, 0x04, 0x21, 0xF0, 0xD8, 0x09, 0xDA, 0x9A, 0x0D, 0xBF, 0xC3, 0xBC, 0x14, 0xD5, 0xE5, 0xAF, 0xCB, 0x78, 0x20, 0x20, 0x60, 0x69, 0x1E, 0xFF, 0x18, 0x08, 0xD5, 0x56, 0x23, 0x5E, 0xE5, 0xEB, 0x1E, 0x00, 0x01, 0x18, 0xFC, 0xCD, 0xE1, 0x07, 0x01, 0x9C, 0xFF, 0xCD, 0xE1, 0x07, 0x0E, 0xF6, 0xCD, 0xE1, 0x07, 0x7D, 0xCD, 0xEB, 0x07, 0xE1, 0xD1, 0xC9, 0xCD, 0xA6, 0x0D, 0xE1, 0xC8, 0xE9, 0xFD, 0xCB, 0x01, 0xCE, 0x7E, 0xFE, 0x76, 0xCA, 0x84, 0x0B, 0xD6, 0x1A, 0xCE, 0x00, 0x28, 0x69, 0xFE, 0xA7, 0x20, 0x1B, 0xE7, 0xCD, 0x92, 0x0D, 0xFE, 0x1A, 0xC2, 0x9A, 0x0D, 0xE7, 0xCD, 0x92, 0x0D, 0xCD, 0x4E, 0x0B, 0xEF, 0x01, 0x34, 0xCD, 0xF5, 0x0B, 0xCD, 0xF5, 0x08, 0x18, 0x3D, 0xFE, 0xA8, 0x20, 0x33, 0xE7, 0xCD, 0x92, 0x0D, 0xCD, 0x4E, 0x0B, 0xCD, 0x02, 0x0C, 0xC2, 0xAD, 0x0E, 0xE6, 0x1F, 0x4F, 0xFD, 0xCB, 0x01, 0x4E, 0x28, 0x0A, 0xFD, 0x96, 0x38, 0xCB, 0xFF, 0xC6, 0x3C, 0xD4, 0x71, 0x08, 0xFD, 0x86, 0x39, 0xFE, 0x21, 0x3A, 0x3A, 0x40, 0xDE, 0x01, 0xCD, 0xFA, 0x08, 0xFD, 0xCB, 0x01, 0xC6, 0x18, 0x06, 0xCD, 0x55, 0x0F, 0xCD, 0x55, 0x0B, 0xDF, 0xD6, 0x1A, 0xCE, 0x00, 0x28, 0x06, 0xCD, 0x1D, 0x0D, 0xC3, 0x84, 0x0B, 0xD4, 0x8B, 0x0B, 0xE7, 0xFE, 0x76, 0xC8, 0xC3, 0xD5, 0x0A, 0xCD, 0xA6, 0x0D, 0xC0, 0xE1, 0x18, 0xE2, 0xCD, 0xC5, 0x0A, 0xFD, 0xCB, 0x01, 0x76, 0xCC, 0xF8, 0x13, 0x28, 0x0A, 0xC3, 0xDB, 0x15, 0x3E, 0x0B, 0xD7, 0xED, 0x5B, 0x18, 0x40, 0x78, 0xB1, 0x0B, 0xC8, 0x1A, 0x13, 0xED, 0x53, 0x18, 0x40, 0xCB, 0x77, 0x28, 0xED, 0xFE, 0xC0, 0x28, 0xE7, 0xC5, 0xCD, 0x4B, 0x09, 0xC1, 0x18, 0xE3, 0xCD, 0xC5, 0x0A, 0x3E, 0x76, 0xD7, 0xC9, 0xCD, 0xC5, 0x0A, 0xFD, 0xCB, 0x01, 0xC6, 0xAF, 0xD7, 0xED, 0x4B, 0x39, 0x40, 0x79, 0xFD, 0xCB, 0x01, 0x4E, 0x28, 0x05, 0x3E, 0x5D, 0xFD, 0x96, 0x38, 0x0E, 0x11, 0xB9, 0x30, 0x02, 0x0E, 0x01, 0xCD, 0x0B, 0x09, 0xC9, 0xCD, 0xF5, 0x0B, 0xED, 0x43, 0x36, 0x40, 0x3E, 0x2B, 0x90, 0xDA, 0xAD, 0x0E, 0x47, 0x3E, 0x01, 0xCB, 0x28, 0x30, 0x02, 0x3E, 0x04, 0xCB, 0x29, 0x30, 0x01, 0x07, 0xF5, 0xCD, 0xF5, 0x08, 0x7E, 0x07, 0xFE, 0x10, 0x30, 0x06, 0x0F, 0x30, 0x02, 0xEE, 0x8F, 0x47, 0x11, 0x9E, 0x0C, 0x3A, 0x30, 0x40, 0x93, 0xFA, 0xE9, 0x0B, 0xF1, 0x2F, 0xA0, 0x18, 0x02, 0xF1, 0xB0, 0xFE, 0x08, 0x38, 0x02, 0xEE, 0x8F, 0xD9, 0xD7, 0xD9, 0xC9, 0xCD, 0x02, 0x0C, 0x47, 0xC5, 0xCD, 0x02, 0x0C, 0x59, 0xC1, 0x51, 0x4F, 0xC9, 0xCD, 0xCD, 0x15, 0xDA, 0xAD, 0x0E, 0x0E, 0x01, 0xC8, 0x0E, 0xFF, 0xC9, 0xFD, 0x46, 0x22, 0x0E, 0x21, 0xCD, 0x18, 0x09, 0xCD, 0x9B, 0x09, 0x7E, 0x12, 0xFD, 0x34, 0x3A, 0x2A, 0x0C, 0x40, 0x23, 0x54, 0x5D, 0xED, 0xB1, 0xC3, 0x5D, 0x0A, 0x8B, 0x8D, 0x2D, 0x7F, 0x81, 0x49, 0x75, 0x5F, 0x40, 0x42, 0x2B, 0x17, 0x1F, 0x37, 0x52, 0x45, 0x0F, 0x6D, 0x2B, 0x44, 0x2D, 0x5A, 0x3B, 0x4C, 0x45, 0x0D, 0x52, 0x5A, 0x4D, 0x15, 0x6A, 0x01, 0x14, 0x02, 0x06, 0x00, 0x81, 0x0E, 0x06, 0xDE, 0x05, 0xAB, 0x0D, 0x06, 0x00, 0xB5, 0x0E, 0x00, 0xDC, 0x0C, 0x00, 0xD8, 0x0E, 0x04, 0x14, 0x06, 0xDF, 0x06, 0x05, 0xB9, 0x0D, 0x04, 0x00, 0x2E, 0x0E, 0x05, 0xCF, 0x0A, 0x01, 0x00, 0xE9, 0x0E, 0x05, 0x09, 0x14, 0x05, 0x6A, 0x0D, 0x00, 0xC3, 0x03, 0x03, 0xAF, 0x0E, 0x03, 0x30, 0x07, 0x06, 0x1A, 0x06, 0x00, 0x92, 0x0E, 0x03, 0x6C, 0x0E, 0x05, 0x40, 0x03, 0x05, 0xF6, 0x02, 0x00, 0x7C, 0x0E, 0x00, 0x9A, 0x14, 0x00, 0x2A, 0x0A, 0x06, 0x1A, 0x06, 0x00, 0xAF, 0x0B, 0x06, 0x1A, 0x06, 0x00, 0xAF, 0x0B, 0x00, 0x0E, 0x0C, 0x06, 0x00, 0x32, 0x0F, 0x00, 0x2B, 0x0F, 0x00, 0x23, 0x0F, 0x00, 0x69, 0x08, 0x05, 0xCB, 0x0A, 0x03, 0x2C, 0x07, 0xFD, 0x36, 0x01, 0x01, 0xCD, 0x73, 0x0A, 0xCD, 0xBC, 0x14, 0x21, 0x00, 0x40, 0x36, 0xFF, 0x21, 0x2D, 0x40, 0xCB, 0x6E, 0x28, 0x0E, 0xFE, 0xE3, 0x7E, 0xC2, 0x6F, 0x0D, 0xCD, 0xA6, 0x0D, 0xC8, 0xCF, 0x0C, 0xCF, 0x08, 0xDF, 0x06, 0x00, 0xFE, 0x76, 0xC8, 0x4F, 0xE7, 0x79, 0xD6, 0xE1, 0x38, 0x3B, 0x4F, 0x21, 0x29, 0x0C, 0x09, 0x4E, 0x09, 0x18, 0x03, 0x2A, 0x30, 0x40, 0x7E, 0x23, 0x22, 0x30, 0x40, 0x01, 0xF4, 0x0C, 0xC5, 0x4F, 0xFE, 0x0B, 0x30, 0x0B, 0x21, 0x16, 0x0D, 0x06, 0x00, 0x09, 0x4E, 0x09, 0xE5, 0xDF, 0xC9, 0xDF, 0xB9, 0x20, 0x12, 0xE7, 0xC9, 0x17, 0x25, 0x53, 0x0F, 0x6B, 0x13, 0x76, 0xCD, 0xA6, 0x0D, 0xC0, 0xC1, 0x7E, 0xFE, 0x76, 0xC8, 0x18, 0x72, 0xFE, 0x76, 0xCD, 0x9C, 0x0D, 0xBF, 0xC1, 0xCC, 0x1D, 0x0D, 0xEB, 0x2A, 0x30, 0x40, 0x4E, 0x23, 0x46, 0xEB, 0xC5, 0xC9, 0xCD, 0x1C, 0x11, 0xFD, 0x36, 0x2D, 0x00, 0x30, 0x08, 0xFD, 0xCB, 0x2D, 0xCE, 0x20, 0x18, 0xCF, 0x01, 0xCC, 0xA7, 0x11, 0xFD, 0xCB, 0x01, 0x76, 0x20, 0x0D, 0xAF, 0xCD, 0xA6, 0x0D, 0xC4, 0xF8, 0x13, 0x21, 0x2D, 0x40, 0xB6, 0x77, 0xEB, 0xED, 0x43, 0x2E, 0x40, 0x22, 0x12, 0x40, 0xC9, 0xC1, 0x3A, 0x01, 0x40, 0xF5, 0xCD, 0x55, 0x0F, 0xF1, 0x01, 0x21, 0x13, 0xFD, 0x56, 0x01, 0xAA, 0xE6, 0x40, 0x20, 0x1B, 0xCB, 0x7A, 0x20, 0xB7, 0x18, 0x9D, 0xCD, 0x1C, 0x11, 0xF5, 0x79, 0xF6, 0x9F, 0x3C, 0x20, 0x0B, 0xF1, 0x18, 0xAD, 0xCD, 0x55, 0x0F, 0xFD, 0xCB, 0x01, 0x76, 0xC0, 0xCF, 0x0B, 0x20, 0xF4, 0xCD, 0xA6, 0x0D, 0xC8, 0xEF, 0xA0, 0x34, 0xC9, 0xFD, 0xCB, 0x01, 0x7E, 0xC9, 0xCD, 0xA6, 0x0D, 0x28, 0x06, 0xEF, 0x02, 0x34, 0x1A, 0xA7, 0xC8, 0xC3, 0xDE, 0x0C, 0xFE, 0xE0, 0x20, 0x09, 0xE7, 0xCD, 0x92, 0x0D, 0xCD, 0x1D, 0x0D, 0x18, 0x06, 0xCD, 0x1D, 0x0D, 0xEF, 0xA1, 0x34, 0xEF, 0xC0, 0x02, 0x01, 0xE0, 0x01, 0x34, 0xCD, 0x21, 0x13, 0x22, 0x1F, 0x40, 0x2B, 0x7E, 0xCB, 0xFE, 0x01, 0x06, 0x00, 0x09, 0x07, 0x38, 0x06, 0xCB, 0x21, 0xCD, 0x9E, 0x09, 0x23, 0xE5, 0xEF, 0x02, 0x02, 0x34, 0xE1, 0xEB, 0x0E, 0x0A, 0xED, 0xB0, 0x2A, 0x07, 0x40, 0xEB, 0x13, 0x73, 0x23, 0x72, 0xCD, 0x5A, 0x0E, 0xD0, 0xFD, 0xCB, 0x08, 0x7E, 0xC0, 0xFD, 0x46, 0x2E, 0xCB, 0xB0, 0x2A, 0x29, 0x40, 0x7E, 0xE6, 0xC0, 0x20, 0x17, 0xC5, 0xCD, 0xF2, 0x09, 0xC1, 0x23, 0x23, 0x23, 0xCD, 0x4C, 0x00, 0xDF, 0xFE, 0xF3, 0xEB, 0x20, 0xEA, 0xEB, 0xE7, 0xEB, 0xB8, 0x20, 0xE4, 0x22, 0x29, 0x40, 0xC9, 0xFD, 0xCB, 0x2D, 0x4E, 0xC2, 0x4B, 0x0D, 0x2A, 0x12, 0x40, 0xCB, 0x7E, 0x28, 0x1C, 0x23, 0x22, 0x1F, 0x40, 0xEF, 0xE0, 0xE2, 0x0F, 0xC0, 0x02, 0x34, 0xCD, 0x5A, 0x0E, 0xD8, 0x2A, 0x1F, 0x40, 0x11, 0x0F, 0x00, 0x19, 0x5E, 0x23, 0x56, 0xEB, 0x18, 0x2E, 0xCF, 0x00, 0xEF, 0xE1, 0xE0, 0xE2, 0x32, 0x00, 0x02, 0x01, 0x03, 0x33, 0x00, 0x04, 0x34, 0xA7, 0xC9, 0x34, 0x37, 0xC9, 0xCD, 0xA7, 0x0E, 0x78, 0xB1, 0x20, 0x04, 0xED, 0x4B, 0x34, 0x40, 0xED, 0x43, 0x32, 0x40, 0xC9, 0x2A, 0x2B, 0x40, 0x18, 0x05, 0xCD, 0xA7, 0x0E, 0x60, 0x69, 0x7C, 0xFE, 0xF0, 0x30, 0x22, 0xCD, 0xD8, 0x09, 0x22, 0x29, 0x40, 0xC9, 0xCD, 0xCD, 0x15, 0x38, 0x16, 0x28, 0x02, 0xED, 0x44, 0xF5, 0xCD, 0xA7, 0x0E, 0xF1, 0xFD, 0xCB, 0x00, 0x7E, 0xC8, 0x02, 0xC9, 0xCD, 0x8A, 0x15, 0x38, 0x01, 0xC8, 0xCF, 0x0A, 0xCD, 0x81, 0x0E, 0xC3, 0x9A, 0x14, 0x2A, 0x07, 0x40, 0x23, 0xE3, 0xE5, 0xED, 0x73, 0x02, 0x40, 0xCD, 0x81, 0x0E, 0x01, 0x06, 0x00, 0x2A, 0x1C, 0x40, 0x09, 0x38, 0x08, 0xEB, 0x21, 0x24, 0x00, 0x19, 0xED, 0x72, 0xD8, 0x2E, 0x03, 0xC3, 0x58, 0x00, 0xE1, 0xE3, 0x7C, 0xFE, 0x3E, 0x28, 0x06, 0xED, 0x73, 0x02, 0x40, 0x18, 0xA1, 0xE3, 0xE5, 0xCF, 0x06, 0xFD, 0xCB, 0x08, 0x7E, 0x20, 0x32, 0xCD, 0xA3, 0x14, 0x21, 0x2D, 0x40, 0xCB, 0xEE, 0xCB, 0xB6, 0x3A, 0x01, 0x40, 0xE6, 0x40, 0x01, 0x02, 0x00, 0x20, 0x02, 0x0E, 0x04, 0xB6, 0x77, 0xF7, 0x36, 0x76, 0x79, 0x0F, 0x0F, 0x38, 0x05, 0x3E, 0x0B, 0x12, 0x2B, 0x77, 0x2B, 0x36, 0x7F, 0x2A, 0x39, 0x40, 0x22, 0x30, 0x40, 0xE1, 0xC3, 0x72, 0x04, 0xCF, 0x07, 0xCD, 0xE7, 0x02, 0xFD, 0xCB, 0x3B, 0xB6, 0xC9, 0xFD, 0xCB, 0x3B, 0xF6, 0xC3, 0x07, 0x02, 0xCD, 0xA7, 0x0E, 0xCD, 0xE7, 0x02, 0x60, 0x69, 0xCD, 0x2D, 0x02, 0xFD, 0x36, 0x35, 0xFF, 0xCD, 0x07, 0x02, 0x18, 0x05, 0x3E, 0x7F, 0xDB, 0xFE, 0x1F, 0xFD, 0xCB, 0x3B, 0x86, 0x3E, 0xFF, 0x32, 0x27, 0x40, 0xC9, 0xDF, 0x06, 0x00, 0xC5, 0xFE, 0x40, 0x20, 0x2F, 0xCD, 0xA6, 0x0D, 0x28, 0x28, 0xED, 0x4B, 0x32, 0x40, 0xCD, 0x20, 0x15, 0xEF, 0xA1, 0x0F, 0x30, 0x37, 0x16, 0x04, 0x30, 0x80, 0x41, 0x00, 0x00, 0x80, 0x2E, 0x02, 0xA1, 0x03, 0x2D, 0x34, 0xCD, 0x8A, 0x15, 0xED, 0x43, 0x32, 0x40, 0x7E, 0xA7, 0x28, 0x03, 0xD6, 0x10, 0x77, 0x18, 0x0D, 0xFE, 0x42, 0x20, 0x0D, 0xCD, 0xA6, 0x0D, 0x28, 0x04, 0xEF, 0xA3, 0x34, 0x34, 0xE7, 0xC3, 0x83, 0x10, 0xFE, 0x41, 0x20, 0x11, 0xCD, 0xBB, 0x02, 0x44, 0x4D, 0x51, 0x14, 0xC4, 0xBD, 0x07, 0x7A, 0x8A, 0x42, 0x4F, 0xEB, 0x18, 0x3B, 0xCD, 0xD2, 0x14, 0x38, 0x6E, 0xFE, 0x1B, 0xCA, 0x47, 0x10, 0x01, 0xD8, 0x09, 0xFE, 0x16, 0x28, 0x5D, 0xFE, 0x10, 0x20, 0x0F, 0xCD, 0x49, 0x00, 0xCD, 0x55, 0x0F, 0xFE, 0x11, 0x20, 0x2E, 0xCD, 0x49, 0x00, 0x18, 0x22, 0xFE, 0x0B, 0x20, 0x28, 0xCD, 0x49, 0x00, 0xE5, 0x18, 0x03, 0xCD, 0x49, 0x00, 0xFE, 0x0B, 0x20, 0x14, 0xD1, 0xA7, 0xED, 0x52, 0x44, 0x4D, 0x21, 0x01, 0x40, 0xCB, 0xB6, 0xCB, 0x7E, 0xC4, 0xC3, 0x12, 0xE7, 0xC3, 0x88, 0x10, 0xFE, 0x76, 0x20, 0xE1, 0xC3, 0x9A, 0x0D, 0xD6, 0xC4, 0x38, 0xF9, 0x01, 0xEC, 0x04, 0xFE, 0x13, 0x28, 0x13, 0x30, 0xF0, 0x06, 0x10, 0xC6, 0xD9, 0x4F, 0xFE, 0xDC, 0x30, 0x02, 0xCB, 0xB1, 0xFE, 0xEA, 0x38, 0x02, 0xCB, 0xB9, 0xC5, 0xE7, 0xC3, 0x59, 0x0F, 0xFE, 0x26, 0x38, 0x1E, 0xCD, 0x1C, 0x11, 0xDA, 0x4B, 0x0D, 0xCC, 0xA7, 0x11, 0x3A, 0x01, 0x40, 0xFE, 0xC0, 0x38, 0x4E, 0x23, 0xED, 0x5B, 0x1C, 0x40, 0xCD, 0xF6, 0x19, 0xEB, 0x22, 0x1C, 0x40, 0x18, 0x40, 0xCD, 0xA6, 0x0D, 0x20, 0x23, 0xCD, 0xD9, 0x14, 0xDF, 0x01, 0x06, 0x00, 0xCD, 0x9E, 0x09, 0x23, 0x36, 0x7E, 0x23, 0xEB, 0x2A, 0x1C, 0x40, 0x0E, 0x05, 0xA7, 0xED, 0x42, 0x22, 0x1C, 0x40, 0xED, 0xB0, 0xEB, 0x2B, 0xCD, 0x4C, 0x00, 0x18, 0x14, 0xE7, 0xFE, 0x7E, 0x20, 0xFB, 0x23, 0xED, 0x5B, 0x1C, 0x40, 0xCD, 0xF6, 0x19, 0xED, 0x53, 0x1C, 0x40, 0x22, 0x16, 0x40, 0xFD, 0xCB, 0x01, 0xF6, 0xDF, 0xFE, 0x10, 0x20, 0x0C, 0xFD, 0xCB, 0x01, 0x76, 0x20, 0x2A, 0xCD, 0x63, 0x12, 0xE7, 0x18, 0xF0, 0x01, 0xC3, 0x00, 0xFE, 0x12, 0x38, 0x1D, 0xD6, 0x16, 0x30, 0x04, 0xC6, 0x0D, 0x18, 0x0E, 0xFE, 0x03, 0x38, 0x0A, 0xD6, 0xC2, 0x38, 0x0D, 0xFE, 0x06, 0x30, 0x09, 0xC6, 0x03, 0x81, 0x4F, 0x21, 0x4C, 0x10, 0x09, 0x46, 0xD1, 0x7A, 0xB8, 0x38, 0x2C, 0xA7, 0xCA, 0x18, 0x00, 0xC5, 0xD5, 0xCD, 0xA6, 0x0D, 0x28, 0x09, 0x7B, 0xE6, 0x3F, 0x47, 0xEF, 0x37, 0x34, 0x18, 0x09, 0x7B, 0xFD, 0xAE, 0x01, 0xE6, 0x40, 0xC2, 0x9A, 0x0D, 0xD1, 0x21, 0x01, 0x40, 0xCB, 0xF6, 0xCB, 0x7B, 0x20, 0x02, 0xCB, 0xB6, 0xC1, 0x18, 0xCF, 0xD5, 0x79, 0xFD, 0xCB, 0x01, 0x76, 0x20, 0x15, 0xE6, 0x3F, 0xC6, 0x08, 0x4F, 0xFE, 0x10, 0x20, 0x04, 0xCB, 0xF1, 0x18, 0x08, 0x38, 0xD7, 0xFE, 0x17, 0x28, 0x02, 0xCB, 0xF9, 0xC5, 0xE7, 0xC3, 0x59, 0x0F, 0x06, 0x08, 0x08, 0x0A, 0x02, 0x03, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x06, 0xFD, 0xCB, 0x01, 0xF6, 0xDF, 0xCD, 0xCE, 0x14, 0xD2, 0x9A, 0x0D, 0xE5, 0x4F, 0xE7, 0xE5, 0xCB, 0xA9, 0xFE, 0x10, 0x28, 0x17, 0xCB, 0xF1, 0xFE, 0x0D, 0x28, 0x0C, 0xCB, 0xE9, 0xCD, 0xD2, 0x14, 0x30, 0x0A, 0xCB, 0xB1, 0xE7, 0x18, 0xF6, 0xE7, 0xFD, 0xCB, 0x01, 0xB6, 0x41, 0xCD, 0xA6, 0x0D, 0x20, 0x08, 0x79, 0xE6, 0xE0, 0xCB, 0xFF, 0x4F, 0x18, 0x34, 0x2A, 0x10, 0x40, 0x7E, 0xE6, 0x7F, 0x28, 0x2A, 0xB9, 0x20, 0x1F, 0x17, 0x87, 0xF2, 0x95, 0x11, 0x38, 0x2D, 0xD1, 0xD5, 0xE5, 0x23, 0x1A, 0x13, 0xA7, 0x28, 0xFB, 0xBE, 0x28, 0xF7, 0xF6, 0x80, 0xBE, 0x20, 0x06, 0x1A, 0xCD, 0xD2, 0x14, 0x30, 0x15, 0xE1, 0xC5, 0xCD, 0xF2, 0x09, 0xEB, 0xC1, 0x18, 0xD1, 0xCB, 0xF8, 0xD1, 0xDF, 0xFE, 0x10, 0x28, 0x09, 0xCB, 0xE8, 0x18, 0x0D, 0xD1, 0xD1, 0xD1, 0xE5, 0xDF, 0xCD, 0xD2, 0x14, 0x30, 0x03, 0xE7, 0x18, 0xF8, 0xE1, 0xCB, 0x10, 0xCB, 0x70, 0xC9, 0xAF, 0x47, 0xCB, 0x79, 0x20, 0x4B, 0xCB, 0x7E, 0x20, 0x0E, 0x3C, 0x23, 0x4E, 0x23, 0x46, 0x23, 0xEB, 0xCD, 0xC3, 0x12, 0xDF, 0xC3, 0x5A, 0x12, 0x23, 0x23, 0x23, 0x46, 0xCB, 0x71, 0x28, 0x0A, 0x05, 0x28, 0xE8, 0xEB, 0xDF, 0xFE, 0x10, 0x20, 0x61, 0xEB, 0xEB, 0x18, 0x24, 0xE5, 0xDF, 0xE1, 0xFE, 0x1A, 0x28, 0x20, 0xCB, 0x79, 0x28, 0x52, 0xCB, 0x71, 0x20, 0x06, 0xFE, 0x11, 0x20, 0x3C, 0xE7, 0xC9, 0xFE, 0x11, 0x28, 0x6C, 0xFE, 0xDF, 0x20, 0x32, 0xDF, 0x2B, 0x22, 0x16, 0x40, 0x18, 0x5E, 0x21, 0x00, 0x00, 0xE5, 0xE7, 0xE1, 0x79, 0xFE, 0xC0, 0x20, 0x09, 0xDF, 0xFE, 0x11, 0x28, 0x51, 0xFE, 0xDF, 0x28, 0xE5, 0xC5, 0xE5, 0xCD, 0xFF, 0x12, 0xE3, 0xEB, 0xCD, 0xDD, 0x12, 0x38, 0x19, 0x0B, 0xCD, 0x05, 0x13, 0x09, 0xD1, 0xC1, 0x10, 0xB3, 0xCB, 0x79, 0x20, 0x66, 0xE5, 0xCB, 0x71, 0x20, 0x13, 0x42, 0x4B, 0xDF, 0xFE, 0x11, 0x28, 0x02, 0xCF, 0x02, 0xE7, 0xE1, 0x11, 0x05, 0x00, 0xCD, 0x05, 0x13, 0x09, 0xC9, 0xCD, 0xFF, 0x12, 0xE3, 0xCD, 0x05, 0x13, 0xC1, 0x09, 0x23, 0x42, 0x4B, 0xEB, 0xCD, 0xC2, 0x12, 0xDF, 0xFE, 0x11, 0x28, 0x07, 0xFE, 0x1A, 0x20, 0xDB, 0xCD, 0x63, 0x12, 0xE7, 0xFE, 0x10, 0x28, 0xF8, 0xFD, 0xCB, 0x01, 0xB6, 0xC9, 0xCD, 0xA6, 0x0D, 0xC4, 0xF8, 0x13, 0xE7, 0xFE, 0x11, 0x28, 0x50, 0xD5, 0xAF, 0xF5, 0xC5, 0x11, 0x01, 0x00, 0xDF, 0xE1, 0xFE, 0xDF, 0x28, 0x17, 0xF1, 0xCD, 0xDE, 0x12, 0xF5, 0x50, 0x59, 0xE5, 0xDF, 0xE1, 0xFE, 0xDF, 0x28, 0x09, 0xFE, 0x11, 0xC2, 0x9A, 0x0D, 0x62, 0x6B, 0x18, 0x13, 0xE5, 0xE7, 0xE1, 0xFE, 0x11, 0x28, 0x0C, 0xF1, 0xCD, 0xDE, 0x12, 0xF5, 0xDF, 0x60, 0x69, 0xFE, 0x11, 0x20, 0xE6, 0xF1, 0xE3, 0x19, 0x2B, 0xE3, 0xA7, 0xED, 0x52, 0x01, 0x00, 0x00, 0x38, 0x07, 0x23, 0xA7, 0xFA, 0x31, 0x12, 0x44, 0x4D, 0xD1, 0xFD, 0xCB, 0x01, 0xB6, 0xCD, 0xA6, 0x0D, 0xC8, 0xAF, 0xC5, 0xCD, 0xEB, 0x19, 0xC1, 0x2A, 0x1C, 0x40, 0x77, 0x23, 0x73, 0x23, 0x72, 0x23, 0x71, 0x23, 0x70, 0x23, 0x22, 0x1C, 0x40, 0xFD, 0xCB, 0x01, 0xB6, 0xC9, 0xAF, 0xD5, 0xE5, 0xF5, 0xCD, 0x92, 0x0D, 0xF1, 0xCD, 0xA6, 0x0D, 0x28, 0x12, 0xF5, 0xCD, 0xA7, 0x0E, 0xD1, 0x78, 0xB1, 0x37, 0x28, 0x05, 0xE1, 0xE5, 0xA7, 0xED, 0x42, 0x7A, 0xDE, 0x00, 0xE1, 0xD1, 0xC9, 0xEB, 0x23, 0x5E, 0x23, 0x56, 0xC9, 0xCD, 0xA6, 0x0D, 0xC8, 0xC5, 0x06, 0x10, 0x7C, 0x4D, 0x21, 0x00, 0x00, 0x29, 0x38, 0x06, 0xCB, 0x11, 0x17, 0x30, 0x04, 0x19, 0xDA, 0xD3, 0x0E, 0x10, 0xF2, 0xC1, 0xC9, 0x2A, 0x12, 0x40, 0xFD, 0xCB, 0x2D, 0x4E, 0x28, 0x44, 0x01, 0x05, 0x00, 0x03, 0x23, 0x7E, 0xA7, 0x28, 0xFB, 0xCD, 0xD2, 0x14, 0x38, 0xF5, 0xFE, 0x0D, 0xCA, 0xC8, 0x13, 0xF7, 0xD5, 0x2A, 0x12, 0x40, 0x1B, 0x79, 0xD6, 0x06, 0x47, 0x3E, 0x40, 0x28, 0x0E, 0x23, 0x7E, 0xA7, 0x28, 0xFB, 0x13, 0x12, 0x10, 0xF7, 0xF6, 0x80, 0x12, 0x3E, 0x80, 0x2A, 0x12, 0x40, 0xAE, 0xE1, 0xCD, 0xE7, 0x13, 0xE5, 0xEF, 0x02, 0x34, 0xE1, 0x01, 0x05, 0x00, 0xA7, 0xED, 0x42, 0x18, 0x40, 0xFD, 0xCB, 0x01, 0x76, 0x28, 0x06, 0x11, 0x06, 0x00, 0x19, 0x18, 0xE7, 0x2A, 0x12, 0x40, 0xED, 0x4B, 0x2E, 0x40, 0xFD, 0xCB, 0x2D, 0x46, 0x20, 0x30, 0x78, 0xB1, 0xC8, 0xE5, 0xF7, 0xD5, 0xC5, 0x54, 0x5D, 0x23, 0x36, 0x00, 0xED, 0xB8, 0xE5, 0xCD, 0xF8, 0x13, 0xE1, 0xE3, 0xA7, 0xED, 0x42, 0x09, 0x30, 0x02, 0x44, 0x4D, 0xE3, 0xEB, 0x78, 0xB1, 0x28, 0x02, 0xED, 0xB0, 0xC1, 0xD1, 0xE1, 0xEB, 0x78, 0xB1, 0xC8, 0xD5, 0xED, 0xB0, 0xE1, 0xC9, 0x2B, 0x2B, 0x2B, 0x7E, 0xE5, 0xC5, 0xCD, 0xCE, 0x13, 0xC1, 0xE1, 0x03, 0x03, 0x03, 0xC3, 0x60, 0x0A, 0x3E, 0x60, 0x2A, 0x12, 0x40, 0xAE, 0xF5, 0xCD, 0xF8, 0x13, 0xEB, 0x09, 0xE5, 0x03, 0x03, 0x03, 0xF7, 0xEB, 0xE1, 0x0B, 0x0B, 0xC5, 0xED, 0xB8, 0xEB, 0xC1, 0x0B, 0x70, 0x2B, 0x71, 0xF1, 0xF5, 0xCD, 0xC7, 0x14, 0xF1, 0x2B, 0x77, 0x2A, 0x1A, 0x40, 0x22, 0x14, 0x40, 0x2B, 0x36, 0x80, 0xC9, 0x2A, 0x1C, 0x40, 0x2B, 0x46, 0x2B, 0x4E, 0x2B, 0x56, 0x2B, 0x5E, 0x2B, 0x7E, 0x22, 0x1C, 0x40, 0xC9, 0xCD, 0x1C, 0x11, 0xC2, 0x9A, 0x0D, 0xCD, 0xA6, 0x0D, 0x20, 0x08, 0xCB, 0xB1, 0xCD, 0xA7, 0x11, 0xCD, 0x1D, 0x0D, 0x38, 0x08, 0xC5, 0xCD, 0xF2, 0x09, 0xCD, 0x60, 0x0A, 0xC1, 0xCB, 0xF9, 0x06, 0x00, 0xC5, 0x21, 0x01, 0x00, 0xCB, 0x71, 0x20, 0x02, 0x2E, 0x05, 0xEB, 0xE7, 0x26, 0x40, 0xCD, 0xDD, 0x12, 0xDA, 0x31, 0x12, 0xE1, 0xC5, 0x24, 0xE5, 0x60, 0x69, 0xCD, 0x05, 0x13, 0xEB, 0xDF, 0xFE, 0x1A, 0x28, 0xE8, 0xFE, 0x11, 0x20, 0xBB, 0xE7, 0xC1, 0x79, 0x68, 0x26, 0x00, 0x23, 0x23, 0x29, 0x19, 0xDA, 0xD3, 0x0E, 0xD5, 0xC5, 0xE5, 0x44, 0x4D, 0x2A, 0x14, 0x40, 0x2B, 0xCD, 0x9E, 0x09, 0x23, 0x77, 0xC1, 0x0B, 0x0B, 0x0B, 0x23, 0x71, 0x23, 0x70, 0xF1, 0x23, 0x77, 0x62, 0x6B, 0x1B, 0x36, 0x00, 0xC1, 0xED, 0xB8, 0xC1, 0x70, 0x2B, 0x71, 0x2B, 0x3D, 0x20, 0xF8, 0xC9, 0x2A, 0x1A, 0x40, 0x2B, 0xCD, 0x9E, 0x09, 0x23, 0x23, 0xC1, 0xED, 0x43, 0x14, 0x40, 0xC1, 0xEB, 0x23, 0xC9, 0x2A, 0x10, 0x40, 0x36, 0x80, 0x23, 0x22, 0x14, 0x40, 0x2A, 0x14, 0x40, 0x22, 0x1A, 0x40, 0x22, 0x1C, 0x40, 0xC9, 0x2A, 0x14, 0x40, 0x36, 0x7F, 0x23, 0x36, 0x76, 0x23, 0xFD, 0x36, 0x22, 0x02, 0x18, 0xEA, 0x21, 0x5D, 0x40, 0x22, 0x1F, 0x40, 0x2A, 0x1A, 0x40, 0x18, 0xE2, 0xED, 0x5B, 0x14, 0x40, 0xC3, 0x5D, 0x0A, 0xFE, 0x26, 0x18, 0x02, 0xFE, 0x1C, 0x3F, 0xD0, 0xFE, 0x40, 0xC9, 0xCD, 0x48, 0x15, 0xFE, 0x1B, 0x20, 0x15, 0xEF, 0xA1, 0xC0, 0x02, 0x34, 0xE7, 0xCD, 0x14, 0x15, 0x38, 0x0A, 0xEF, 0xE0, 0xA4, 0x05, 0xC0, 0x04, 0x0F, 0x34, 0x18, 0xF0, 0xFE, 0x2A, 0xC0, 0xFD, 0x36, 0x5D, 0xFF, 0xE7, 0xFE, 0x15, 0x28, 0x07, 0xFE, 0x16, 0x20, 0x04, 0xFD, 0x34, 0x5D, 0xE7, 0xCD, 0x48, 0x15, 0xEF, 0xE0, 0x00, 0x02, 0x18, 0x38, 0x34, 0xC9, 0xFE, 0x1C, 0xD8, 0xFE, 0x26, 0x3F, 0xD8, 0xD6, 0x1C, 0x4F, 0x06, 0x00, 0xFD, 0x21, 0x00, 0x40, 0xC5, 0xEF, 0xA0, 0x34, 0xC1, 0x36, 0x91, 0x78, 0xA7, 0x20, 0x07, 0x77, 0xB1, 0xC8, 0x41, 0x4E, 0x36, 0x89, 0x35, 0xCB, 0x21, 0xCB, 0x10, 0x30, 0xF9, 0xCB, 0x38, 0xCB, 0x19, 0x23, 0x70, 0x23, 0x71, 0x2B, 0x2B, 0xC9, 0xF5, 0xEF, 0xA0, 0x34, 0xF1, 0xCD, 0x14, 0x15, 0xD8, 0xEF, 0x01, 0xA4, 0x04, 0x0F, 0x34, 0xE7, 0x18, 0xF3, 0xEF, 0x2D, 0x32, 0xC0, 0x02, 0x27, 0xA1, 0x03, 0x2D, 0x32, 0x00, 0x22, 0x2D, 0x30, 0x33, 0x40, 0x03, 0x2D, 0x32, 0x00, 0x0C, 0x01, 0x02, 0x01, 0x30, 0x80, 0x48, 0x18, 0x96, 0x80, 0x2F, 0x04, 0x02, 0x01, 0xA4, 0xE0, 0x00, 0x04, 0x04, 0x2F, 0x02, 0x05, 0x01, 0x2F, 0xDA, 0x02, 0x34, 0xC9, 0xCD, 0xF8, 0x13, 0xA7, 0x20, 0x05, 0x47, 0x4F, 0xF5, 0x18, 0x31, 0x43, 0x59, 0x4A, 0xD6, 0x91, 0x3F, 0xCB, 0x78, 0xF5, 0xCB, 0xF8, 0x38, 0x24, 0x3C, 0xED, 0x44, 0xFE, 0x08, 0x38, 0x06, 0x59, 0x48, 0x06, 0x00, 0xD6, 0x08, 0xA7, 0x57, 0x7B, 0x07, 0x28, 0x07, 0xCB, 0x38, 0xCB, 0x19, 0x15, 0x20, 0xF9, 0x30, 0x08, 0x03, 0x78, 0xB1, 0x20, 0x03, 0xF1, 0x37, 0xF5, 0xC5, 0xEF, 0x34, 0xC1, 0xF1, 0x79, 0xC9, 0xCD, 0x8A, 0x15, 0xD8, 0xF5, 0x05, 0x04, 0x28, 0x03, 0xF1, 0x37, 0xC9, 0xF1, 0xC9, 0xEF, 0x2D, 0x32, 0x00, 0x0B, 0x2D, 0x33, 0x00, 0x0D, 0x02, 0x34, 0x3E, 0x1C, 0xD7, 0xC9, 0x27, 0x34, 0x3E, 0x16, 0xD7, 0xEF, 0x34, 0x7E, 0xCD, 0x1D, 0x15, 0xEF, 0x30, 0x78, 0x00, 0x80, 0x03, 0x30, 0xEF, 0x1A, 0x20, 0x9A, 0x85, 0x04, 0x24, 0xC1, 0x30, 0x34, 0x00, 0x03, 0x18, 0x38, 0xA2, 0x0F, 0x24, 0x34, 0x21, 0x6B, 0x40, 0x36, 0x90, 0x06, 0x0A, 0x23, 0xE5, 0xC5, 0xEF, 0xA4, 0x2E, 0x01, 0x34, 0xCD, 0xCD, 0x15, 0xF6, 0x90, 0xC1, 0xE1, 0x77, 0x10, 0xEE, 0x23, 0x01, 0x08, 0x00, 0xE5, 0x2B, 0x7E, 0xFE, 0x90, 0x28, 0xFA, 0xED, 0x42, 0xE5, 0x7E, 0xC6, 0x6B, 0xF5, 0xF1, 0x23, 0x7E, 0xCE, 0x00, 0x27, 0xF5, 0xE6, 0x0F, 0x77, 0xCB, 0xFE, 0x28, 0xF2, 0xF1, 0xE1, 0x06, 0x06, 0x36, 0x80, 0x2B, 0x10, 0xFB, 0xEF, 0x02, 0xE1, 0x34, 0xCD, 0xCD, 0x15, 0x28, 0x02, 0xED, 0x44, 0x5F, 0x1C, 0x1C, 0xE1, 0x2B, 0x1D, 0x7E, 0xE6, 0x0F, 0x28, 0xF9, 0x7B, 0xD6, 0x05, 0xFE, 0x08, 0xF2, 0x82, 0x16, 0xFE, 0xF6, 0xFA, 0x82, 0x16, 0xC6, 0x06, 0x28, 0x48, 0xFA, 0xB2, 0x16, 0x47, 0xCD, 0xD0, 0x16, 0x10, 0xFB, 0x18, 0x40, 0x43, 0xCD, 0xD0, 0x16, 0xCD, 0xC2, 0x16, 0x3E, 0x2A, 0xD7, 0x78, 0xA7, 0xF2, 0x98, 0x16, 0xED, 0x44, 0x47, 0x3E, 0x16, 0x18, 0x02, 0x3E, 0x15, 0xD7, 0x78, 0x06, 0xFF, 0x04, 0xD6, 0x0A, 0x30, 0xFB, 0xC6, 0x0A, 0x4F, 0x78, 0xA7, 0x28, 0x03, 0xCD, 0xEB, 0x07, 0x79, 0xCD, 0xEB, 0x07, 0xC9, 0xED, 0x44, 0x47, 0x3E, 0x1B, 0xD7, 0x3E, 0x1C, 0xD7, 0x10, 0xFD, 0x18, 0x09, 0x3E, 0x1C, 0xD7, 0x35, 0x34, 0xE8, 0x3E, 0x1B, 0xD7, 0x35, 0x34, 0xE8, 0xCD, 0xD0, 0x16, 0x18, 0xF8, 0x7E, 0xE6, 0x0F, 0xCD, 0xEB, 0x07, 0x2B, 0xC9, 0x7E, 0x36, 0x00, 0xA7, 0xC8, 0x23, 0xCB, 0x7E, 0xCB, 0xFE, 0x2B, 0xC8, 0xC5, 0x01, 0x05, 0x00, 0x09, 0x41, 0x4F, 0x37, 0x2B, 0x7E, 0x2F, 0xCE, 0x00, 0x77, 0x10, 0xF8, 0x79, 0xC1, 0xC9, 0xE5, 0xF5, 0x4E, 0x23, 0x46, 0x77, 0x23, 0x79, 0x4E, 0xC5, 0x23, 0x4E, 0x23, 0x46, 0xEB, 0x57, 0x5E, 0xD5, 0x23, 0x56, 0x23, 0x5E, 0xD5, 0xD9, 0xD1, 0xE1, 0xC1, 0xD9, 0x23, 0x56, 0x23, 0x5E, 0xF1, 0xE1, 0xC9, 0xA7, 0xC8, 0xFE, 0x21, 0x30, 0x16, 0xC5, 0x47, 0xD9, 0xCB, 0x2D, 0xCB, 0x1A, 0xCB, 0x1B, 0xD9, 0xCB, 0x1A, 0xCB, 0x1B, 0x10, 0xF2, 0xC1, 0xD0, 0xCD, 0x41, 0x17, 0xC0, 0xD9, 0xAF, 0x2E, 0x00, 0x57, 0x5D, 0xD9, 0x11, 0x00, 0x00, 0xC9, 0x1C, 0xC0, 0x14, 0xC0, 0xD9, 0x1C, 0x20, 0x01, 0x14, 0xD9, 0xC9, 0x1A, 0xA7, 0xC8, 0x13, 0x1A, 0xEE, 0x80, 0x12, 0x1B, 0xD9, 0xE5, 0xD9, 0xD5, 0xE5, 0xCD, 0xD8, 0x16, 0x47, 0xEB, 0xCD, 0xD8, 0x16, 0x4F, 0xB8, 0x30, 0x03, 0x78, 0x41, 0xEB, 0xF5, 0x90, 0xCD, 0xF7, 0x16, 0xCD, 0x1A, 0x17, 0xF1, 0xE1, 0x77, 0xE5, 0x68, 0x61, 0x19, 0xD9, 0xEB, 0xED, 0x4A, 0xEB, 0x7C, 0x8D, 0x6F, 0x1F, 0xAD, 0xD9, 0xEB, 0xE1, 0x1F, 0x30, 0x08, 0x3E, 0x01, 0xCD, 0x1A, 0x17, 0x34, 0x28, 0x23, 0xD9, 0x7D, 0xE6, 0x80, 0xD9, 0x23, 0x77, 0x2B, 0x28, 0x1F, 0x7B, 0xED, 0x44, 0x3F, 0x5F, 0x7A, 0x2F, 0xCE, 0x00, 0x57, 0xD9, 0x7B, 0x2F, 0xCE, 0x00, 0x5F, 0x7A, 0x2F, 0xCE, 0x00, 0x30, 0x07, 0x1F, 0xD9, 0x34, 0xCA, 0x80, 0x18, 0xD9, 0x57, 0xD9, 0xAF, 0x18, 0x6C, 0x37, 0x35, 0x34, 0xC8, 0x23, 0xAE, 0xCB, 0xFE, 0x2B, 0xC9, 0xAF, 0xCD, 0xBC, 0x17, 0xD8, 0xD9, 0xE5, 0xD9, 0xD5, 0xEB, 0xCD, 0xBC, 0x17, 0xEB, 0x38, 0x5A, 0xE5, 0xCD, 0xF7, 0x16, 0x78, 0xA7, 0xED, 0x62, 0xD9, 0xE5, 0xED, 0x62, 0xD9, 0x06, 0x21, 0x18, 0x11, 0x30, 0x05, 0x19, 0xD9, 0xED, 0x5A, 0xD9, 0xD9, 0xCB, 0x1C, 0xCB, 0x1D, 0xD9, 0xCB, 0x1C, 0xCB, 0x1D, 0xD9, 0xCB, 0x18, 0xCB, 0x19, 0xD9, 0xCB, 0x19, 0x1F, 0x10, 0xE4, 0xEB, 0xD9, 0xEB, 0xD9, 0xC1, 0xE1, 0x78, 0x81, 0x20, 0x01, 0xA7, 0x3D, 0x3F, 0x17, 0x3F, 0x1F, 0xF2, 0x19, 0x18, 0x30, 0x68, 0xA7, 0x3C, 0x20, 0x08, 0x38, 0x06, 0xD9, 0xCB, 0x7A, 0xD9, 0x20, 0x5C, 0x77, 0xD9, 0x78, 0xD9, 0x30, 0x15, 0x7E, 0xA7, 0x3E, 0x80, 0x28, 0x01, 0xAF, 0xD9, 0xA2, 0xCD, 0x38, 0x17, 0x07, 0x77, 0x38, 0x2E, 0x23, 0x77, 0x2B, 0x18, 0x29, 0x06, 0x20, 0xD9, 0xCB, 0x7A, 0xD9, 0x20, 0x12, 0x07, 0xCB, 0x13, 0xCB, 0x12, 0xD9, 0xCB, 0x13, 0xCB, 0x12, 0xD9, 0x35, 0x28, 0xD7, 0x10, 0xEA, 0x18, 0xD7, 0x17, 0x30, 0x0C, 0xCD, 0x41, 0x17, 0x20, 0x07, 0xD9, 0x16, 0x80, 0xD9, 0x34, 0x28, 0x18, 0xE5, 0x23, 0xD9, 0xD5, 0xD9, 0xC1, 0x78, 0x17, 0xCB, 0x16, 0x1F, 0x77, 0x23, 0x71, 0x23, 0x72, 0x23, 0x73, 0xE1, 0xD1, 0xD9, 0xE1, 0xD9, 0xC9, 0xCF, 0x05, 0xEB, 0xAF, 0xCD, 0xBC, 0x17, 0x38, 0xF7, 0xEB, 0xCD, 0xBC, 0x17, 0xD8, 0xD9, 0xE5, 0xD9, 0xD5, 0xE5, 0xCD, 0xF7, 0x16, 0xD9, 0xE5, 0x60, 0x69, 0xD9, 0x61, 0x68, 0xAF, 0x06, 0xDF, 0x18, 0x10, 0x17, 0xCB, 0x11, 0xD9, 0xCB, 0x11, 0xCB, 0x10, 0xD9, 0x29, 0xD9, 0xED, 0x6A, 0xD9, 0x38, 0x10, 0xED, 0x52, 0xD9, 0xED, 0x52, 0xD9, 0x30, 0x0F, 0x19, 0xD9, 0xED, 0x5A, 0xD9, 0xA7, 0x18, 0x08, 0xA7, 0xED, 0x52, 0xD9, 0xED, 0x52, 0xD9, 0x37, 0x04, 0xFA, 0xA2, 0x18, 0xF5, 0x28, 0xE1, 0x5F, 0x51, 0xD9, 0x59, 0x50, 0xF1, 0xCB, 0x18, 0xF1, 0xCB, 0x18, 0xD9, 0xC1, 0xE1, 0x78, 0x91, 0xC3, 0x10, 0x18, 0x7E, 0xFE, 0x81, 0x30, 0x06, 0x36, 0x00, 0x3E, 0x20, 0x18, 0x05, 0xD6, 0xA0, 0xF0, 0xED, 0x44, 0xD5, 0xEB, 0x2B, 0x47, 0xCB, 0x38, 0xCB, 0x38, 0xCB, 0x38, 0x28, 0x05, 0x36, 0x00, 0x2B, 0x10, 0xFB, 0xE6, 0x07, 0x28, 0x09, 0x47, 0x3E, 0xFF, 0xCB, 0x27, 0x10, 0xFC, 0xA6, 0x77, 0xEB, 0xD1, 0xC9, 0x00, 0xB0, 0x00, 0x31, 0x00, 0x30, 0x00, 0xF1, 0x49, 0x0F, 0xDA, 0xA2, 0x34, 0x20, 0x2F, 0x1C, 0x72, 0x1A, 0xE3, 0x19, 0x4C, 0x17, 0xC6, 0x17, 0x82, 0x18, 0xE2, 0x1D, 0xED, 0x1A, 0xF3, 0x1A, 0x03, 0x1B, 0x03, 0x1B, 0x03, 0x1B, 0x03, 0x1B, 0x03, 0x1B, 0x03, 0x1B, 0x55, 0x17, 0xF8, 0x1A, 0x03, 0x1B, 0x03, 0x1B, 0x03, 0x1B, 0x03, 0x1B, 0x03, 0x1B, 0x03, 0x1B, 0x62, 0x1B, 0xA0, 0x1A, 0x06, 0x1C, 0xA4, 0x1B, 0x11, 0x1C, 0x49, 0x1D, 0x3E, 0x1D, 0x6E, 0x1D, 0xC4, 0x1D, 0xD4, 0x1D, 0x76, 0x1D, 0xA9, 0x1C, 0x5B, 0x1C, 0x46, 0x1C, 0xDB, 0x1D, 0xAF, 0x1A, 0xAA, 0x1A, 0xBE, 0x1A, 0xC5, 0x1A, 0xD5, 0x1B, 0x8F, 0x1B, 0xD5, 0x1A, 0xF6, 0x19, 0x37, 0x1C, 0x23, 0x1C, 0xFC, 0x19, 0x17, 0x1C, 0xDB, 0x1A, 0xCE, 0x1A, 0x2B, 0x00, 0x18, 0x1D, 0xE4, 0x18, 0xE4, 0x19, 0x5A, 0x15, 0x7F, 0x1A, 0x51, 0x1A, 0x63, 0x1A, 0x45, 0x1A, 0xCD, 0x85, 0x1B, 0x78, 0x32, 0x1E, 0x40, 0xD9, 0xE3, 0xD9, 0xED, 0x53, 0x1C, 0x40, 0xD9, 0x7E, 0x23, 0xE5, 0xA7, 0xF2, 0xC2, 0x19, 0x57, 0xE6, 0x60, 0x0F, 0x0F, 0x0F, 0x0F, 0xC6, 0x72, 0x6F, 0x7A, 0xE6, 0x1F, 0x18, 0x0E, 0xFE, 0x18, 0x30, 0x08, 0xD9, 0x01, 0xFB, 0xFF, 0x54, 0x5D, 0x09, 0xD9, 0x07, 0x6F, 0x11, 0x23, 0x19, 0x26, 0x00, 0x19, 0x5E, 0x23, 0x56, 0x21, 0xA7, 0x19, 0xE3, 0xD5, 0xD9, 0xED, 0x4B, 0x1D, 0x40, 0xC9, 0xF1, 0x3A, 0x1E, 0x40, 0xD9, 0x18, 0xC3, 0xD5, 0xE5, 0x01, 0x05, 0x00, 0xCD, 0xC5, 0x0E, 0xE1, 0xD1, 0xC9, 0xCD, 0xEB, 0x19, 0xED, 0xB0, 0xC9, 0x62, 0x6B, 0xCD, 0xEB, 0x19, 0xD9, 0xE5, 0xD9, 0xE3, 0xC5, 0x7E, 0xE6, 0xC0, 0x07, 0x07, 0x4F, 0x0C, 0x7E, 0xE6, 0x3F, 0x20, 0x02, 0x23, 0x7E, 0xC6, 0x50, 0x12, 0x3E, 0x05, 0x91, 0x23, 0x13, 0x06, 0x00, 0xED, 0xB0, 0xC1, 0xE3, 0xD9, 0xE1, 0xD9, 0x47, 0xAF, 0x05, 0xC8, 0x12, 0x13, 0x18, 0xFA, 0xA7, 0xC8, 0xF5, 0xD5, 0x11, 0x00, 0x00, 0xCD, 0xFE, 0x19, 0xD1, 0xF1, 0x3D, 0x18, 0xF2, 0x4F, 0x07, 0x07, 0x81, 0x4F, 0x06, 0x00, 0x09, 0xC9, 0xD5, 0x2A, 0x1F, 0x40, 0xCD, 0x3C, 0x1A, 0xCD, 0xF6, 0x19, 0xE1, 0xC9, 0x62, 0x6B, 0xD9, 0xE5, 0x21, 0x15, 0x19, 0xD9, 0xCD, 0x2D, 0x1A, 0xCD, 0xFE, 0x19, 0xD9, 0xE1, 0xD9, 0xC9, 0xE5, 0xEB, 0x2A, 0x1F, 0x40, 0xCD, 0x3C, 0x1A, 0xEB, 0xCD, 0xF6, 0x19, 0xEB, 0xE1, 0xC9, 0x06, 0x05, 0x1A, 0x4E, 0xEB, 0x12, 0x71, 0x23, 0x13, 0x10, 0xF7, 0xEB, 0xC9, 0x47, 0xCD, 0xA0, 0x19, 0x2D, 0x0F, 0xC0, 0x02, 0xA0, 0xC2, 0x2D, 0xE0, 0x04, 0xE2, 0xC1, 0x03, 0x34, 0xCD, 0xFC, 0x19, 0xCD, 0xA4, 0x19, 0x0F, 0x01, 0xC2, 0x02, 0x31, 0xEE, 0xE1, 0x03, 0x34, 0xC9, 0x7E, 0xA7, 0xC8, 0x23, 0x7E, 0xEE, 0x80, 0x77, 0x2B, 0xC9, 0x23, 0xCB, 0xBE, 0x2B, 0xC9, 0x23, 0x7E, 0x2B, 0x35, 0x34, 0x37, 0xC4, 0xE0, 0x1A, 0x23, 0x07, 0xCB, 0x1E, 0x2B, 0xC9, 0xCD, 0xA7, 0x0E, 0x0A, 0xC3, 0x1D, 0x15, 0xCD, 0xA7, 0x0E, 0x21, 0x20, 0x15, 0xE5, 0xC5, 0xC9, 0x7E, 0xA7, 0xC8, 0x3E, 0xFF, 0x18, 0x07, 0x7E, 0xED, 0x44, 0x3F, 0x18, 0x05, 0xAF, 0x23, 0xAE, 0x2B, 0x07, 0xE5, 0x06, 0x05, 0x36, 0x00, 0x23, 0x10, 0xFB, 0xE1, 0xD0, 0x36, 0x81, 0xC9, 0x1A, 0xA7, 0xC8, 0x37, 0x18, 0xED, 0x1A, 0xA7, 0xC0, 0x18, 0xE8, 0x1A, 0xA7, 0xC0, 0xD5, 0x1B, 0xAF, 0x12, 0x1B, 0x12, 0xD1, 0xC9, 0x78, 0xD6, 0x08, 0xCB, 0x57, 0x20, 0x01, 0x3D, 0x0F, 0x30, 0x08, 0xF5, 0xE5, 0xCD, 0x72, 0x1A, 0xD1, 0xEB, 0xF1, 0xCB, 0x57, 0x20, 0x07, 0x0F, 0xF5, 0xCD, 0x4C, 0x17, 0x18, 0x33, 0x0F, 0xF5, 0xCD, 0xF8, 0x13, 0xD5, 0xC5, 0xCD, 0xF8, 0x13, 0xE1, 0x7C, 0xB5, 0xE3, 0x78, 0x20, 0x0B, 0xB1, 0xC1, 0x28, 0x04, 0xF1, 0x3F, 0x18, 0x16, 0xF1, 0x18, 0x13, 0xB1, 0x28, 0x0D, 0x1A, 0x96, 0x38, 0x09, 0x20, 0xED, 0x0B, 0x13, 0x23, 0xE3, 0x2B, 0x18, 0xDF, 0xC1, 0xF1, 0xA7, 0xF5, 0xEF, 0xA0, 0x34, 0xF1, 0xF5, 0xDC, 0xD5, 0x1A, 0xCD, 0xCE, 0x1A, 0xF1, 0x0F, 0xD4, 0xD5, 0x1A, 0xC9, 0xCD, 0xF8, 0x13, 0xD5, 0xC5, 0xCD, 0xF8, 0x13, 0xE1, 0xE5, 0xD5, 0xC5, 0x09, 0x44, 0x4D, 0xF7, 0xCD, 0xC3, 0x12, 0xC1, 0xE1, 0x78, 0xB1, 0x28, 0x02, 0xED, 0xB0, 0xC1, 0xE1, 0x78, 0xB1, 0x28, 0x02, 0xED, 0xB0, 0x2A, 0x1C, 0x40, 0x11, 0xFB, 0xFF, 0xE5, 0x19, 0xD1, 0xC9, 0xCD, 0xCD, 0x15, 0x38, 0x0E, 0x20, 0x0C, 0xF5, 0x01, 0x01, 0x00, 0xF7, 0xF1, 0x12, 0xCD, 0xC3, 0x12, 0xEB, 0xC9, 0xCF, 0x0A, 0x2A, 0x16, 0x40, 0xE5, 0xCD, 0xF8, 0x13, 0xD5, 0x03, 0xF7, 0xE1, 0xED, 0x53, 0x16, 0x40, 0xD5, 0xED, 0xB0, 0xEB, 0x2B, 0x36, 0x76, 0xFD, 0xCB, 0x01, 0xBE, 0xCD, 0x92, 0x0D, 0xCD, 0x22, 0x0D, 0xE1, 0x22, 0x16, 0x40, 0xFD, 0xCB, 0x01, 0xFE, 0xCD, 0x55, 0x0F, 0xE1, 0x22, 0x16, 0x40, 0x18, 0xB0, 0x01, 0x01, 0x00, 0xF7, 0x36, 0x76, 0x2A, 0x39, 0x40, 0xE5, 0x2E, 0xFF, 0x22, 0x39, 0x40, 0x2A, 0x0E, 0x40, 0xE5, 0xED, 0x53, 0x0E, 0x40, 0xD5, 0xCD, 0xDB, 0x15, 0xD1, 0x2A, 0x0E, 0x40, 0xA7, 0xED, 0x52, 0x44, 0x4D, 0xE1, 0x22, 0x0E, 0x40, 0xE1, 0x22, 0x39, 0x40, 0xCD, 0xC3, 0x12, 0xEB, 0xC9, 0xCD, 0xF8, 0x13, 0x78, 0xB1, 0x28, 0x01, 0x1A, 0xC3, 0x1D, 0x15, 0xCD, 0xF8, 0x13, 0xC3, 0x20, 0x15, 0xD9, 0xE5, 0x21, 0x1E, 0x40, 0x35, 0xE1, 0x20, 0x04, 0x23, 0xD9, 0xC9, 0xD9, 0x5E, 0xAF, 0xCB, 0x7B, 0x28, 0x01, 0x2F, 0x57, 0x19, 0xD9, 0xC9, 0x1A, 0xA7, 0x20, 0xF0, 0xD9, 0x23, 0xD9, 0xC9, 0xEF, 0xC0, 0x02, 0x2D, 0xE0, 0x05, 0x24, 0xE0, 0x01, 0xC0, 0x04, 0x03, 0xE0, 0x34, 0xC9, 0xEF, 0x2D, 0x32, 0x00, 0x04, 0x36, 0x34, 0xC9, 0x2D, 0x36, 0xC0, 0x03, 0xE0, 0x01, 0x2C, 0x00, 0x03, 0xA1, 0x03, 0x34, 0xC9, 0xEF, 0x30, 0xF1, 0x38, 0xAA, 0x3B, 0x29, 0x04, 0x2D, 0x24, 0xC3, 0x03, 0x2D, 0x0F, 0xA1, 0x03, 0x88, 0x13, 0x36, 0x58, 0x65, 0x66, 0x9D, 0x78, 0x65, 0x40, 0xA2, 0x60, 0x32, 0xC9, 0xE7, 0x21, 0xF7, 0xAF, 0x24, 0xEB, 0x2F, 0xB0, 0xB0, 0x14, 0xEE, 0x7E, 0xBB, 0x94, 0x58, 0xF1, 0x3A, 0x7E, 0xF8, 0xCF, 0xE3, 0x34, 0xCD, 0xCD, 0x15, 0x20, 0x07, 0x38, 0x03, 0x86, 0x30, 0x09, 0xCF, 0x05, 0x38, 0x07, 0x96, 0x30, 0x04, 0xED, 0x44, 0x77, 0xC9, 0xEF, 0x02, 0xA0, 0x34, 0xC9, 0xEF, 0x2D, 0x33, 0x00, 0x04, 0x34, 0xCF, 0x09, 0xA0, 0x02, 0x34, 0x7E, 0x36, 0x80, 0xCD, 0x1D, 0x15, 0xEF, 0x30, 0x38, 0x00, 0x03, 0x01, 0x2D, 0x30, 0xF0, 0x4C, 0xCC, 0xCC, 0xCD, 0x03, 0x33, 0x00, 0x08, 0x01, 0xA1, 0x03, 0x01, 0x34, 0x34, 0xEF, 0x01, 0x30, 0xF0, 0x31, 0x72, 0x17, 0xF8, 0x04, 0x01, 0xA2, 0x03, 0xA2, 0x03, 0x2D, 0x30, 0x32, 0x20, 0x04, 0xA2, 0x03, 0x8C, 0x11, 0xAC, 0x14, 0x09, 0x56, 0xDA, 0xA5, 0x59, 0x30, 0xC5, 0x5C, 0x90, 0xAA, 0x9E, 0x70, 0x6F, 0x61, 0xA1, 0xCB, 0xDA, 0x96, 0xA4, 0x31, 0x9F, 0xB4, 0xE7, 0xA0, 0xFE, 0x5C, 0xFC, 0xEA, 0x1B, 0x43, 0xCA, 0x36, 0xED, 0xA7, 0x9C, 0x7E, 0x5E, 0xF0, 0x6E, 0x23, 0x80, 0x93, 0x04, 0x0F, 0x34, 0xC9, 0xEF, 0x30, 0xEE, 0x22, 0xF9, 0x83, 0x6E, 0x04, 0x2D, 0xA2, 0x0F, 0x24, 0x03, 0x2D, 0x0F, 0x2D, 0x0F, 0x2D, 0x27, 0xA1, 0x03, 0x2D, 0x33, 0xC0, 0x00, 0x04, 0x02, 0x34, 0xC9, 0xA1, 0x03, 0x01, 0x32, 0x00, 0x02, 0x18, 0x34, 0xC9, 0xEF, 0x35, 0x27, 0xA1, 0x03, 0xE0, 0x00, 0x06, 0x18, 0x2F, 0x03, 0xEF, 0x35, 0x2D, 0x2D, 0x04, 0x2D, 0x0F, 0xA1, 0x03, 0x86, 0x14, 0xE6, 0x5C, 0x1F, 0x0B, 0xA3, 0x8F, 0x38, 0xEE, 0xE9, 0x15, 0x63, 0xBB, 0x23, 0xEE, 0x92, 0x0D, 0xCD, 0xED, 0xF1, 0x23, 0x5D, 0x1B, 0xEA, 0x04, 0x34, 0xC9, 0xEF, 0x2D, 0x1C, 0x01, 0x1D, 0x05, 0x34, 0xC9, 0x7E, 0xFE, 0x81, 0x38, 0x0E, 0xEF, 0xA1, 0x18, 0x01, 0x05, 0x2D, 0x32, 0xA3, 0x01, 0x00, 0x06, 0x18, 0x2F, 0x03, 0xEF, 0xA0, 0x01, 0x2D, 0x2D, 0x04, 0x2D, 0x0F, 0xA1, 0x03, 0x8C, 0x10, 0xB2, 0x13, 0x0E, 0x55, 0xE4, 0x8D, 0x58, 0x39, 0xBC, 0x5B, 0x98, 0xFD, 0x9E, 0x00, 0x36, 0x75, 0xA0, 0xDB, 0xE8, 0xB4, 0x63, 0x42, 0xC4, 0xE6, 0xB5, 0x09, 0x36, 0xBE, 0xE9, 0x36, 0x73, 0x1B, 0x5D, 0xEC, 0xD8, 0xDE, 0x63, 0xBE, 0xF0, 0x61, 0xA1, 0xB3, 0x0C, 0x04, 0x0F, 0x34, 0xC9, 0xEF, 0x2D, 0x2D, 0x04, 0xA1, 0x03, 0x18, 0x25, 0xA1, 0x0F, 0x05, 0x21, 0x2D, 0x0F, 0x34, 0xC9, 0xEF, 0x1F, 0xA3, 0x03, 0x18, 0x34, 0xC9, 0xEF, 0x2D, 0x2C, 0x00, 0x1E, 0xA2, 0x34, 0xEF, 0x01, 0x2D, 0x2C, 0x00, 0x07, 0x22, 0x04, 0x34, 0xC3, 0x5B, 0x1C, 0x02, 0x2D, 0x2C, 0x00, 0x09, 0xA0, 0x01, 0x33, 0x00, 0x06, 0xA1, 0x01, 0x05, 0x02, 0xA1, 0x34, 0xC9, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x0F, 0x0F, 0x0F, 0x0F, 0xF0, 0xF0, 0xF0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0, 0xF0, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0x00, 0x00, 0x00, 0x00, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x22, 0x78, 0x20, 0x20, 0x7E, 0x00, 0x00, 0x08, 0x3E, 0x28, 0x3E, 0x0A, 0x3E, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x3C, 0x42, 0x04, 0x08, 0x00, 0x08, 0x00, 0x00, 0x04, 0x08, 0x08, 0x08, 0x08, 0x04, 0x00, 0x00, 0x20, 0x10, 0x10, 0x10, 0x10, 0x20, 0x00, 0x00, 0x00, 0x10, 0x08, 0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x04, 0x08, 0x10, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14, 0x00, 0x00, 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x3C, 0x46, 0x4A, 0x52, 0x62, 0x3C, 0x00, 0x00, 0x18, 0x28, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00, 0x3C, 0x42, 0x02, 0x3C, 0x40, 0x7E, 0x00, 0x00, 0x3C, 0x42, 0x0C, 0x02, 0x42, 0x3C, 0x00, 0x00, 0x08, 0x18, 0x28, 0x48, 0x7E, 0x08, 0x00, 0x00, 0x7E, 0x40, 0x7C, 0x02, 0x42, 0x3C, 0x00, 0x00, 0x3C, 0x40, 0x7C, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x7E, 0x02, 0x04, 0x08, 0x10, 0x10, 0x00, 0x00, 0x3C, 0x42, 0x3C, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x3E, 0x02, 0x3C, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x00, 0x00, 0x7C, 0x42, 0x7C, 0x42, 0x42, 0x7C, 0x00, 0x00, 0x3C, 0x42, 0x40, 0x40, 0x42, 0x3C, 0x00, 0x00, 0x78, 0x44, 0x42, 0x42, 0x44, 0x78, 0x00, 0x00, 0x7E, 0x40, 0x7C, 0x40, 0x40, 0x7E, 0x00, 0x00, 0x7E, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x00, 0x00, 0x3C, 0x42, 0x40, 0x4E, 0x42, 0x3C, 0x00, 0x00, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x00, 0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00, 0x02, 0x02, 0x02, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x44, 0x48, 0x70, 0x48, 0x44, 0x42, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7E, 0x00, 0x00, 0x42, 0x66, 0x5A, 0x42, 0x42, 0x42, 0x00, 0x00, 0x42, 0x62, 0x52, 0x4A, 0x46, 0x42, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x7C, 0x42, 0x42, 0x7C, 0x40, 0x40, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x52, 0x4A, 0x3C, 0x00, 0x00, 0x7C, 0x42, 0x42, 0x7C, 0x44, 0x42, 0x00, 0x00, 0x3C, 0x40, 0x3C, 0x02, 0x42, 0x3C, 0x00, 0x00, 0xFE, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x24, 0x18, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x5A, 0x24, 0x00, 0x00, 0x42, 0x24, 0x18, 0x18, 0x24, 0x42, 0x00, 0x00, 0x82, 0x44, 0x28, 0x10, 0x10, 0x10, 0x00, 0x00, 0x7E, 0x04, 0x08, 0x10, 0x20, 0x7E, 0x00];
// START src/js/zx81/mosaic.js
zx.mosaic = [
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,

  0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0,
  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
  0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0,
  0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0,

  0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55,
  0x00, 0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55,
  0xaa, 0x55, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00
];
// START src/js/zx81/system.js
/**
 * 
 * @constructor
 */
zx.zx81 = function(surface, scale) {
  zx.zxbase.prototype.constructor.call(this, surface, scale, zx.rom, 16 * 1024);
  this.rom = zx.rom;
  this.mosaic = zx.mosaic;

  this.nativeOffset = 256; // if this is changed, ensure it's a power of two
  this.inverseOffset = 128;

  // Conceptually, any character >= 'this.nativeOffset' is a treated as a ZX81-specific one while
  // anything lower is ASCII. This allows us to use normal javascript,
  // e.g. var s = "hello" + zx.chr$(7)
  // with both JS-friendly stuff, and zx-specifics without them colliding
  zx.code = function(character) {
    var ascii = sgxASCII(character);
    if (ascii >= this.nativeOffset) { // already in ZX
      return ascii;
    }

    ascii -= 32;

    if (ascii < 0 || ascii >= this.mapASCII2ZX.length) {
      ascii = 15; // map to ?
    }
    var chr = this.mapASCII2ZX[ascii];
    return chr | this.nativeOffset;
  }.bind(this);

  // As a consequence of creating the ZX/non-ZX division, we have everything from chr$
  // as a ZX-character
  zx.chr$ = function(code) {
    return sgxToCharacter(code | this.nativeOffset);
  }.bind(this);

  zx.inverse = function(text) {
    var output = "";
    for (var i = 0; i < text.length; ++i) {
      output += zx.chr$(zx.code(text[i]) + this.inverseOffset);
    }
    return output;
  }.bind(this);

  // !"#$%&'()*+,-./
  //0123456789
  //:;<=>?@
  //AB...
  //[\]^_`
  //abcde..
  //{|}~
  var NIL = 15;
  this.mapASCII2ZX = [
    0, NIL, 11, 12, 13, NIL, NIL, 11, 16, 17, 23, 21, 26, 22, 27, 24,
    28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
    14, 25, 19, 20, 18, 15, NIL,
    38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
    NIL, NIL, NIL, NIL, NIL, NIL,
    38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
    NIL, NIL, NIL, NIL, NIL,
  ];
  // A = zx.38 = asc.65
  // a = zx.38+64 = asc.102


  this.palette = [
    [0, 0],
    [0, 0],
    [0, 0],
    [0, 0],
    [0, 0],
    [0, 0],
    [0, 0],
    [0, 0]
  ];

  this.font = [];
  for (var i = 0; i < 64; ++i) {
    this.font[i] = zx.Texture.create8x8(this.rom, 0x1e00 + i * 8);
    this.font[i + this.inverseOffset] = zx.Texture.create8x8(this.rom, 0x1e00 + i * 8, true);
  }
  /*
	for(var i=32;i<128;++i) {
		this.font[i-this.inverseOffset] = zx.Texture.create8x8(this.rom, 0x1d00 + (i-32)*8);
		this.font[i] = zx.Texture.create8x8(this.rom, 0x1d00 + (i-32)*8, true);
	}

	for(var i=0;i<11;++i) {
		this.font[i] = zx.Texture.create8x8(this.mosaic, i*8);
		this.font[i+this.inverseOffset] = zx.Texture.create8x8(this.mosaic, i*8, true);
	}
*/
  this.screen = new zx.screen(this);
  this.audio = new zx.audio(this);
}
Inheritance_Manager.extend(zx.zx81, zx.zxbase);

zx.zx81.prototype.getCharacterTexture = function(chr) {

  if (chr < this.nativeOffset) {
    // Map ASCII to our font
    // e.g. space = asc:32 = 0, " = asc 34 : 11
    chr = this.mapASCII2ZX[chr - 32];

  } else { // we're in ZX-format
    chr = chr - this.nativeOffset;
  }

  var texture = this.font[chr];

  if (chr < 0 | chr >= this.font.length || !this.font[chr]) {
    return this.font[15]; // The ? symbol
  }

  return this.font[chr];
}
// START src/js/texture.js

zx.Texture = function(width, height, data, offset, inverse) {
  this.ink = this.createtexture(width, height, 1, data, offset, inverse);
  this.paper = this.createtexture(width, height, 0, data, offset, inverse);
  this.solid = this.createtexture(width, height, 2, data, offset, inverse);
}

zx.Texture.create8x8 = function(data, offset, inverse) {
  return new zx.Texture(8, 8, data, offset, inverse);
}

zx.Texture.create16x16 = function(data, offset, inverse) {
  return new zx.Texture(16, 16, data, offset, inverse);
}


zx.Texture.prototype.getWidth = function() {
  return this.ink.getWidth();
}

zx.Texture.prototype.getHeight = function() {
  return this.ink.getHeight();
}

zx.Texture.prototype.createtexture = function(width, height, ink_not_paper, data, offset, inverse) {
  var texture = sgx.graphics.TextureManager.get().create("", width, height);
  var imageData = [];
  texture.lock(imageData);
  var bitmap = imageData.pBitmap_;

  var bit = 0;
  var shift = 7;
  var xpos = 0;
  var pi = 0;
  var setbit = inverse ? 0 : 1;
  var clrbit = inverse ? 1 : 0;
  var solid = ink_not_paper == 2 ? true : false;
  var ink_not_paper = ink_not_paper ? 1 : 0; // ensure it's 1 or 0 (see solid)

  var idx = offset - 1;
  for (var i = 0; i < width * height; ++i) {
    bit >>= 1;
    if (bit == 0) {
      bit = 0x80;
      ++idx;
    }

    var isset = (data[idx] & bit) ? setbit : clrbit;
    var fillPixel = isset == ink_not_paper ? 0xff : 0;

    fillPixel = solid ? (0xff - fillPixel) : fillPixel;

    bitmap[pi + 0] = bitmap[pi + 1] = bitmap[pi + 2] = fillPixel;
    bitmap[pi + 3] = (solid || isset == ink_not_paper) ? 0xff : 0;
    pi += 4;
  }

  texture.unlock(imageData);

  texture.clearRegions();
  texture.addPixelRegion(0, 0, width, height);

  return texture;
}
// START src/js/libstd.js
zx.TO = "TO";
zx.SEMICOLON = ';';

zx.bin = function(binary) {
  if (binary.substring(0, 1) == "%") {
    binary = binary.substring(1);
  }
  return parseInt(binary, 2);
}

zx.hex = function(hex) {
  if (hex.substring(0, 2) == "0x" || hex.substring(0, 2) == "0X") {
    hex = hex.substring(2);
  } else if (hex.substring(0, 1) == "$" || hex.substring(0, 1) == "#") {
    hex = hex.substring(1);
  }
  return parseInt(binary, 16);
}

zx.pause = function(seconds) {
  // was 'number of frames of TV signal'
  var currentTime = new Date().getTime();

  while (currentTime + 1000 * seconds >= new Date().getTime()) {
    // nop
  }
}

zx.inkey$ = function() {
  // @todo
  return "";
}

zx.copy = function() {
  // @TODO Grab surface and upload to imgur
}


// START src/js/libmath.js


zx.abs = function(v) {
  return sgxAbs(v);
}

zx.acs = function(v) {
  return sgxACos(v);
}

zx.asn = function(v) {
  return sgxASin(v);
}

zx.atn = function(v) {
  return sgxAtan(v);
}


// Spectrum only!?
zx.code = function(v) {
  if (v === undefined || v == '') {
    return 0;
  }
  return sgxASCII(v[0]);
}

zx.cos = function(v) {
  return sgxCos(v);
}


zx.ln = function(v) {
  // @todo
  return sgxLn(v);
}

zx.randomize = function(v) {
  // @todo
  sgxRand(v === undefined ? 0 : v);
}

zx.rnd = function() {
  return sgxRand();
}

zx.sgn = function(v) {
  return sgxSgn(v);
}

zx.sqr = function(v) {
  return sgxSqr(v);
}

zx.sin = function(v) {
  return sgxSin(v);
}

zx.pi = function() {
  return SGX_PI;
}

zx.int = function(v) {
  return sgxFloor(v);
}

zx.exp = function(v) {
  // @todo : calculate e ^ v
  return sgxExp(v);
}


// START src/js/libstring.js

zx.code = function(character) {
  return sgxASCII(character);
}

zx.chr$ = function(code) {
  return sgxToCharacter(code);
}

zx.inkey = function() {
  return zx.lastInkey;
}

zx.inkey$ = function() {
  return zx.chr$(zx.lastInkey);
}

zx.len = function(v) {
  return sgxStrlen(v);
}


zx.val = function(v) {
  return sgxAtoi(v);
}

zx.val$ = function(v) {
  return "" + sgxAtoi(v);
}

zx.str$ = function(v) {
  return sgxToCharacter(v);
}



zx.$ = function(value, a, b, c) {
  // An equivalent to RESULT = VAR$(x TO y) where x and y are optional

  // If only the var is given, we probably want to just return the var
  // as it doesn't make sense
  if (a === undefined) {
    return value;
  }


  // First param is TO, so this means 'start from the beginning'
  if (a === zx.TO) {
    first = 0;
    if (b === undefined) { // $(v,TO) - i.e. all of it
      return value;
    } else { // $(v,TO,4) - LEFT$
      return value.substr(0, b);
    }
  } else {
    if (b === undefined) { // $(v,1) - single character
      return value.substr(a, 1);
    } else if (b != zx.TO) { // $(v,1,3) - non-standard, but assume range
      return value.substr(a, b - a);
    } else if (c === undefined) { // $(v,1,TO)	- 1st character given
      return value.substr(a);
    } else { // $(v,1,TO,3)	- 1st & last characters given
      return value.substr(a, c - a);
    }
  }

  // assert
  return "";
}

// START src/js/libgfx.js

zx.udg = function(a, b, c, d, e, f, g, h) {
  if (Object.prototype.toString.call(a) === '[object Array]') {
    if (b === undefined) {
      b = 0;
    }
    return zx.Texture.create8x8(a, b);
  } else {
    return zx.Texture.create8x8([a, b, c, d, e, f, g, h], 0);
  }
}


// START src/js/attribute.js

function zxAttribute(attr) {
  this.ink = attr & 0x07;
  this.paper = (attr & 0x38) >> 3;
  this.bright = (attr & 0x40) ? 1 : 0;
  this.flash = attr & 0x80;
  this.inverse = false;
  //
  this.inkColor = new sgxColorRGBA();
  this.paperColor = new sgxColorRGBA();
  //
  this.recompute();
}

zxAttribute.prototype.setBright = function(state) {
  this.bright = state ? 1 : 0;
  this.recompute();
}

zxAttribute.prototype.setInk = function(color) {
  this.ink = color & 0x07;
  this.recompute();
}

zxAttribute.prototype.setPaper = function(color) {
  this.paper = color & 0x07;
  this.recompute();
}

zxAttribute.prototype.setFlash = function(flash) {
  this.flash = flash ? true : false;
}

zxAttribute.prototype.recompute = function() {
  this.inkColor = new sgxColorRGBA(zx.system.palette[this.ink][this.bright]);
  this.paperColor = new sgxColorRGBA(zx.system.palette[this.paper][this.bright]);
}

// START src/js/audio.js
/**
 * 
 * @constructor
 */
zx.audio = function(system) {
  this.system = system;
  this.audioCtx = new(window.AudioContext || window.audioContext || window.webkitAudioContext);

  zx.beep = this.beep.bind(this);
}

zx.audio.prototype.beep = function(duration, pitch) {
  // The duration is given in seconds, and the pitch is given in semitones above middle C using negative numbers for notes below middle C.

  var oscillator = this.audioCtx.createOscillator();
  var gainNode = this.audioCtx.createGain();

  oscillator.connect(gainNode);
  gainNode.connect(this.audioCtx.destination);

  var key = pitch + 60;
  var frequency = 440 * Math.pow(2, (key - 69) / 12);
  var volume = undefined;
  var callback = undefined;
  var type;

  if (volume) {
    gainNode.gain.value = volume;
  };
  if (frequency) {
    oscillator.frequency.value = frequency;
  }
  if (type) {
    oscillator.type = type;
  }
  if (callback) {
    oscillator.onended = callback;
  }

  oscillator.start();
  zx.pause(duration * 0.9);
  oscillator.stop();

  zx.pause(duration * 0.1);

  return this;
}
// START src/js/input.js
/**
 * 
 * @constructor
 */
zx.input = function(y, x, placeholder) {
  this.x = x;
  this.y = y;
  this.text = "";
  this.maxlength = 12;
  this.visible = true;
  this.focused = false;
  this.password = false;
  this.surround = true;
  this.cursor = this.text.length; // indicates the character index after the cursor
  this.placeholder = placeholder || "";
}

zx.input.prototype.setPassword = function(ispassword) {
  this.password = (ispassword == undefined) ? true : ispassword;
}

zx.input.prototype.setSurround = function(showit) {
  this.surround = (showit == undefined) ? true : showit;
}

zx.input.prototype.focus = function() {
  this.focused = true;
}

zx.input.prototype.unfocus = function() {
  this.focused = false;
}

zx.input.prototype.show = function() {
  this.visible = true;
}

zx.input.prototype.hide = function() {
  this.visible = false;
}

zx.input.prototype.onClick = function(mx, my) {
  var pos = this.getTextPosition(mx, my);
  if (pos.inside) {
    this.focus();
    this.cursor = pos.xpos;
  } else {
    this.unfocus();
  }
}

zx.input.prototype.inject = function(keypress) {
  switch (keypress) {
    case SGX_KEY_BACKSPACE:
      if (this.cursor) {
        var before = this.text.substr(0, this.cursor);
        var after = this.text.substr(this.cursor);
        if (before.length) {
          before = before.substr(0, before.length - 1);
        }
        this.text = before + after;
        this.cursor = before.length;
      }
      return;

    case SGX_KEY_DELETE:
      var before = this.text.substr(0, this.cursor);
      var after = this.text.substr(this.cursor);
      after = after.substr(1);
      this.text = before + after;
      return;

    case SGX_KEY_LEFT:
      if (this.cursor) {
        --this.cursor;
      }
      return;

    case SGX_KEY_RIGHT:
      if (this.cursor < this.text.length) {
        ++this.cursor;
      }
      return;

    case SGX_KEY_TAB:
      this.unfocus();
      $(this).trigger('tab', [this.text]);
      return;

    case SGX_KEY_RETURN:
      this.unfocus();
      $(this).trigger('enter', [this.text]);
      return;
  }

  if (keypress < SGX_KEY_SPACE || keypress > SGX_KEY_z) {
    return;
  }

  if (this.text.length == this.maxlength) {
    return;
  }

  var before = this.text.substr(0, this.cursor);
  var after = this.text.substr(this.cursor);

  this.text = before + zx.chr$(keypress) + after;
  this.cursor++;
}

zx.input.prototype.updateKeyscan = function() {
  if (!this.focused) {
    return;
  }

  for (var k = 8; k < 128; ++k) {
    if (sgx.input.Engine.get().isKeyboardKeyPressed(k)) {
      this.inject(k);
      // Flush the keyboard/mouse buffers so that the same key can't trigger two things
      // e.g. the enter doesn't trigger two input boxes in succession.
      sgx.input.Engine.get().postUpdate(0);
    }
  }

}


zx.input.prototype.draw = function() {
  if (!this.visible) {
    return;
  }

  this.drawText();

  if (this.surround) {
    this.drawSurround();
  }
}

zx.input.prototype.drawText = function() {
  zx.system.screen.bright(false).flash(false);

  if (this.text.length == 0) {
    zx.system.screen.paper(zx.spectrum.WHITE).ink(zx.spectrum.BLUE);
    zx.system.screen.printAt(this.y, this.x, this.placeholder);
  } else {
    zx.system.screen.paper(zx.spectrum.WHITE).ink(zx.spectrum.BLACK);
    var before = this.text.substr(0, this.cursor);
    var after = this.text.substr(this.cursor);

    if (this.password) {
      before = new Array(1 + before.length).join("*");
      after = new Array(1 + after.length).join("*");
    }

    zx.system.screen.printAt(this.y, this.x, before);
    zx.system.screen.printAt(this.y, this.x + before.length + (this.focused ? 1 : 0), after);

    if (this.focused) {
      zx.system.screen.paper(zx.spectrum.BLACK).ink(zx.spectrum.WHITE);
      zx.system.screen.printAt(this.y, this.x + before.length, "L");
    }
  }
}

zx.input.prototype.drawSurround = function() {
  // A box drawn with mosiac/block graphics
  var x = this.x;
  var y = this.y;
  var x2 = x + this.maxlength + 1;

  zx.system.screen.paper(zx.spectrum.WHITE).ink(zx.spectrum.RED);
  zx.system.screen.bright(this.focused);

  zx.system.screen.printAt(y - 1, x - 1, zx.chr$(139));
  zx.system.screen.printAt(y, x - 1, zx.chr$(138));
  zx.system.screen.printAt(y - 1, x2, zx.chr$(135));
  for (var i = 0; i < this.maxlength + 1; ++i) {
    zx.system.screen.printAt(y - 1, i + x, zx.chr$(131));
    zx.system.screen.printAt(y + 1, i + x, zx.chr$(140));
  }
  zx.system.screen.printAt(y + 1, x - 1, zx.chr$(142));
  zx.system.screen.printAt(y, x2, zx.chr$(133));
  zx.system.screen.printAt(y + 1, x2, zx.chr$(141));
}

zx.input.prototype.getTextPosition = function(screenx, screeny) {
  var sx1 = zx.system.toX((this.x - 1) * 8);
  var sx2 = zx.system.toX((this.x + this.maxlength + 2) * 8);
  var sy1 = zx.system.toY((this.y - 1) * 8);
  var sy2 = zx.system.toY((this.y + 2) * 8);

  if (screenx >= sx1 && screenx < sx2 && screeny >= sy1 && screeny < sy2) {
    var tx = (screenx - sx1) / (8 * zx.system.scale);
    tx = sgxFloor(tx) - 1; // to avoid the left edge
    tx = sgxRange(tx, 0, this.text.length);
    return {
      inside: true,
      xpos: tx
    };
  }

  return {
    inside: false
  };
}

zx.input.prototype.isInside = function(screenx, screeny) {
  return this.getTextPosition(screenx, screeny).inside;
}


zx.input.prototype.update = function(telaps) {
  if (!this.visible) {
    return;
  }

  if (sgx.input.Engine.get().mouseLeft.m_bPressed) {
    this.onClick(sgx.input.Engine.get().getMouseX(), sgx.input.Engine.get().getMouseY());
  }

  // Note: keys are only processed by focused input widgets
  this.updateKeyscan();
}
// START src/js/screen.js

/**
 * 
 * @constructor
 */
zx.screen = function(system) {
  this.system = system;

  this.afile = [];
  this.scrfile = [];
  for (var i = 0; i < 32 * 24; ++i) {
    this.afile.push(0); //todo new zx.attribute());
    this.scrfile.push("");
  }

  this.state = {};
  this.currentAttribute = new zxAttribute(0x7);

  this.ink(zx.WHITE);
  this.paper(zx.BLACK);

  this.cls();
}

zx.screen.prototype.drawWith = function(gfx, attr, x, y) {
  this.system.drawWith(gfx, attr, x, y);
};

zx.screen.prototype.setAttribute = function(attr, x, y) {
  if (typeof(attr) === 'zx.attribute') {
    this.afile[x + y * 32] = attr;
  } else {
    this.afile[x + y * 32] = new zxAttribute(attr);
  }
}

zx.screen.prototype.setScreen = function(chr, x, y) {
  this.scrfile[x + y * 32] = chr;
}


zx.screen.prototype.cls = function() {
  this.system.cls();

  var a = new zxAttribute();
  a.setPaper(this.currentAttribute.paper);

  for (var y = 0; y < 24; ++y) {
    for (var x = 0; x < 32; ++x) {
      this.setAttribute(a, x, y);
      this.setScreen(' ', x, y);
      this.system.drawCharacter(32, a, x * 8, y * 8);
    }
  }

  this.lastX = this.lastY = 0;
  this.lastPrintX = this.lastPrintY = 0;
}


// ink 8 and paper 8 are transparent : i.e. don't change the attrMap when writing text/plotting
// these are part of the screen state

// TODO: http://www.worldofspectrum.org/ZXBasicManual/zxmanchap16.html

zx.screen.prototype.border = function(colour) {
  this.system.setBorderColor(colour);
  return this;
}

zx.screen.prototype.ink = function(ink) {
  this.system.setInkColor(ink);
  // TODO remove current, and getInk
  this.currentAttribute.setInk(ink);
  return this;
}

zx.screen.prototype.paper = function(paper) {
  this.system.setPaperColor(paper);
  this.currentAttribute.setPaper(paper);
  return this;
}

zx.screen.prototype.bright = function(bright) {
  this.system.setBright(bright);
  this.currentAttribute.setBright(bright);
  return this;
}

zx.screen.prototype.flash = function(flash) {
  this.system.setFlash(flash);
  this.currentAttribute.setFlash(flash);
  return this;
}

zx.screen.prototype.plot = function(x, y) {
  // 0,0 is bottom left
  // draw in ink/paper with inverse/over
  // http://www.worldofspectrum.org/ZXBasicManual/zxmanchap17.html

  // @todo also on circle/draw
  var nx = sgxFloor(x / 8);
  var ny = sgxFloor(y / 8);
  this.setScreen('', nx, ny);

  this.system.plot(x, y);

  this.lastX = x;
  this.lastY = y;
}

zx.screen.prototype.draw = function(x, y) {
  // 0,0 is bottom left. 
  // Draws relative to last position
  this.system.drawLineWith(this.currentAttribute, this.lastX, this.lastY, this.lastX + x, this.lastY + y);
  this.lastX += x;
  this.lastY += y;
}

zx.screen.prototype.circle = function(x, y, r) {
  // 0,0 is bottom left
  this.system.drawCircle(x, y, r);

  this.lastX = x;
  this.lastY = y;
}



zx.screen.prototype.print = function(text, flags) {
  this.printAt(this.lastPrintY / 8, this.lastPrintX / 8, text, flags);
  return this;
}

zx.screen.prototype.printAt = function(y, x, text, flags) {
  // Lines are numbered from 0 (at the top) to 21, and columns from 0 (on the left) to 31.
  this.printFineAt(y * 8, x * 8, text);

  if (flags != zx.SEMICOLON) {
    this.lastPrintX = 0;
    this.lastPrintY += 8;
  }
  return this;
}

zx.screen.prototype.printFineAt = function(ypos, xpos, text) {
  if (!text) { // blank line
    return;
  }

  var length = text.length;
  var x = xpos;
  var y = ypos;
  // todo: setclip to non-border
  for (var i = 0; i < text.length; ++i) {
    // NOTE: These characters are drawn in the current ink/paper settings
    // NOTE: TODO: Add screen.paper(7) methods to change current state
    // TODO: Each character written affects the attrmap
    var chr = zx.code(text[i]);
    this.system.drawCharacter(chr, this.currentAttribute, x, y);
    var width = this.system.getCharacterWidth(chr);
    x += width;

    if (x >= 256) {
      x -= 256;
      y += this.system.getCharacterHeight(chr);

      // Re-draw if there's any overlap from RHS to LHS
      if (x && x < width) {
        this.system.drawCharacter(chr, this.currentAttribute, x - width, y);
      }
    }

  }

  this.lastPrintX = x;
  this.lastPrintY = y;

  return this;
}


zx.screen.prototype.tab = function(column) {
  if (column * 8 < this.lastPrintX) {
    this.lastPrintX = 0;
    this.lastPrintY += 8;
  }
  var spacing = (column % 31) - this.lastPrintX / 8;
  // prints enough spaces to move the PRINT position to the column specified. 
  // It stays on the same line. or, if this would involve backspacing, moves on to 
  // the next one. Note that the computer reduces the column number 'modulo 32' 
  // (it divides by 32 and takes the remainder); so TAB 33 means the same as TAB 1.

  var spaces = " ".repeat(spacing);
  this.print(spaces, zx.SEMICOLON);
  return this;
}